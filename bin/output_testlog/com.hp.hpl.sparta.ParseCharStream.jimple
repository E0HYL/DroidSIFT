class com.hp.hpl.sparta.ParseCharStream extends java.lang.Object implements com.hp.hpl.sparta.ParseSource
{
    private static final char[] BEGIN_CDATA;
    private static final char[] BEGIN_ETAG;
    private static final char[] CHARREF_BEGIN;
    private static final char[] COMMENT_BEGIN;
    private static final char[] COMMENT_END;
    private static final boolean DEBUG;
    private static final char[] DOCTYPE_BEGIN;
    private static final char[] ENCODING;
    private static final char[] END_CDATA;
    private static final char[] END_EMPTYTAG;
    private static final char[] ENTITY_BEGIN;
    public static final int HISTORY_LENGTH;
    private static final boolean H_DEBUG;
    private static final boolean[] IS_NAME_CHAR;
    private static final char[] MARKUPDECL_BEGIN;
    private static final int MAX_COMMON_CHAR;
    private static final char[] NAME_PUNCT_CHARS;
    private static final char[] NDATA;
    private static final char[] PI_BEGIN;
    private static final char[] PUBLIC;
    private static final char[] QU_END;
    private static final char[] SYSTEM;
    private static final int TMP_BUF_SIZE;
    private static final char[] VERSION;
    private static final char[] VERSIONNUM_PUNC_CHARS;
    private static final char[] XML_BEGIN;
    private final int CBUF_SIZE;
    private final char[] cbuf_;
    private int ch_;
    private int curPos_;
    private java.lang.String docTypeName_;
    private final java.lang.String encoding_;
    private int endPos_;
    private final java.util.Hashtable entities_;
    private boolean eos_;
    private final com.hp.hpl.sparta.ParseHandler handler_;
    private final com.hp.hpl.sparta.CharCircBuffer history_;
    private boolean isExternalDtd_;
    private int lineNumber_;
    private final com.hp.hpl.sparta.ParseLog log_;
    private final java.util.Hashtable pes_;
    private final java.io.Reader reader_;
    private java.lang.String systemId_;
    private final char[] tmpBuf_;

    static void <clinit>()
    {
        char[] r0, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38;
        boolean[] $r1, $r39;
        char c0;
        java.lang.String $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37;
        boolean $z0;
        int $i1;

        r0 = newarray (char)[4];
        r0[0] = 46;
        r0[1] = 45;
        r0[2] = 95;
        r0[3] = 58;
        <com.hp.hpl.sparta.ParseCharStream: char[] NAME_PUNCT_CHARS> = r0;
        $r1 = newarray (boolean)[128];
        <com.hp.hpl.sparta.ParseCharStream: boolean[] IS_NAME_CHAR> = $r1;
        c0 = 0;

     label0:
        if c0 < 128 goto label1;

        $r2 = "<!--";
        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_BEGIN> = $r3;
        $r4 = "-->";
        $r5 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_END> = $r5;
        $r6 = "<?";
        $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] PI_BEGIN> = $r7;
        $r8 = "?>";
        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] QU_END> = $r9;
        $r10 = "<!DOCTYPE";
        $r11 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] DOCTYPE_BEGIN> = $r11;
        $r12 = "<?xml";
        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] XML_BEGIN> = $r13;
        $r14 = "encoding";
        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] ENCODING> = $r15;
        $r16 = "version";
        $r17 = virtualinvoke $r16.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] VERSION> = $r17;
        r18 = newarray (char)[4];
        r18[0] = 95;
        r18[1] = 46;
        r18[2] = 58;
        r18[3] = 45;
        <com.hp.hpl.sparta.ParseCharStream: char[] VERSIONNUM_PUNC_CHARS> = r18;
        $r19 = "<!";
        $r20 = virtualinvoke $r19.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] MARKUPDECL_BEGIN> = $r20;
        $r21 = "&#";
        $r22 = virtualinvoke $r21.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] CHARREF_BEGIN> = $r22;
        $r23 = "<!ENTITY";
        $r24 = virtualinvoke $r23.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] ENTITY_BEGIN> = $r24;
        $r25 = "NDATA";
        $r26 = virtualinvoke $r25.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] NDATA> = $r26;
        $r27 = "SYSTEM";
        $r28 = virtualinvoke $r27.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM> = $r28;
        $r29 = "PUBLIC";
        $r30 = virtualinvoke $r29.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC> = $r30;
        $r31 = "<![CDATA[";
        $r32 = virtualinvoke $r31.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_CDATA> = $r32;
        $r33 = "]]>";
        $r34 = virtualinvoke $r33.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA> = $r34;
        $r35 = "/>";
        $r36 = virtualinvoke $r35.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] END_EMPTYTAG> = $r36;
        $r37 = "</";
        $r38 = virtualinvoke $r37.<java.lang.String: char[] toCharArray()>();
        <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_ETAG> = $r38;
        return;

     label1:
        $r39 = <com.hp.hpl.sparta.ParseCharStream: boolean[] IS_NAME_CHAR>;
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isNameChar(char)>(c0);
        $r39[c0] = $z0;
        $i1 = c0 + 1;
        c0 = (char) $i1;
        goto label0;
    }

    public void <init>(java.lang.String, java.io.Reader, com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String r1, r4;
        java.io.Reader r2;
        com.hp.hpl.sparta.ParseLog r3;
        com.hp.hpl.sparta.ParseHandler r5;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.io.Reader;
        r3 := @parameter2: com.hp.hpl.sparta.ParseLog;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: com.hp.hpl.sparta.ParseHandler;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,char[],com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>(r1, r2, null, r3, r4, r5);
        return;
    }

    public void <init>(java.lang.String, java.io.Reader, char[], com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String r1, r5, r11, $r26, $r27, $r28, $r32, $r35, $r38, $r39;
        java.io.Reader r2, $r40, $r41;
        char[] r3, $r9, $r22, $r43;
        com.hp.hpl.sparta.ParseLog r4, r10, $r29;
        com.hp.hpl.sparta.ParseHandler r6, $r23, $r24, $r42;
        java.util.Hashtable $r7, $r8, $r12, $r14, $r16, $r18, $r20;
        int $i0, $i1;
        com.hp.hpl.sparta.Element r25;
        boolean $z0, $z1;
        java.lang.StringBuffer $r30, $r31, $r33, $r34, $r36, $r37;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.io.Reader;
        r3 := @parameter2: char[];
        r4 := @parameter3: com.hp.hpl.sparta.ParseLog;
        r5 := @parameter4: java.lang.String;
        r6 := @parameter5: com.hp.hpl.sparta.ParseHandler;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_> = null;
        $r7 = new java.util.Hashtable;
        specialinvoke $r7.<java.util.Hashtable: void <init>()>();
        r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_> = $r7;
        $r8 = new java.util.Hashtable;
        specialinvoke $r8.<java.util.Hashtable: void <init>()>();
        r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable pes_> = $r8;
        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = -2;
        r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalDtd_> = 0;
        r0.<com.hp.hpl.sparta.ParseCharStream: int CBUF_SIZE> = 1024;
        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;
        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = 0;
        r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_> = 0;
        $r9 = newarray (char)[255];
        r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_> = $r9;
        r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_> = -1;
        r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_> = 1;
        r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.CharCircBuffer history_> = null;
        if r4 != null goto label5;

        r10 = <com.hp.hpl.sparta.ParseSource: com.hp.hpl.sparta.ParseLog DEFAULT_LOG>;

     label0:
        r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_> = r10;
        if r5 != null goto label6;

        r11 = null;

     label1:
        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_> = r11;
        $r12 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", "<");
        $r14 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", ">");
        $r16 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", "&");
        $r18 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", "\'");
        $r20 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", "\"");
        if r3 == null goto label7;

        r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_> = r3;
        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;
        $r22 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i0 = lengthof $r22;
        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = $i0;
        r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_> = 1;
        r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_> = null;

     label2:
        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_> = r1;
        r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_> = r6;
        $r23 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        interfaceinvoke $r23.<com.hp.hpl.sparta.ParseHandler: void setParseSource(com.hp.hpl.sparta.ParseSource)>(r0);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readProlog()>();
        $r24 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        interfaceinvoke $r24.<com.hp.hpl.sparta.ParseHandler: void startDocument()>();
        r25 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.Element readElement()>();
        $r26 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_>;
        if $r26 == null goto label3;

        $r27 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_>;
        $r28 = virtualinvoke r25.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();
        $z0 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28);
        if $z0 != 0 goto label3;

        $r29 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r30 = new java.lang.StringBuffer;
        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();
        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DOCTYPE name \"");
        $r32 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_>;
        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);
        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" not same as tag name, \"");
        $r35 = virtualinvoke r25.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();
        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);
        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" of root element");
        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();
        $r39 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i1 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r29.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r38, $r39, $i1);

     label3:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isMisc()>();
        if $z1 != 0 goto label8;

        $r40 = r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_>;
        if $r40 == null goto label4;

        $r41 = r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_>;
        virtualinvoke $r41.<java.io.Reader: void close()>();

     label4:
        $r42 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        interfaceinvoke $r42.<com.hp.hpl.sparta.ParseHandler: void endDocument()>();
        return;

     label5:
        r10 = r4;
        goto label0;

     label6:
        r11 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>();
        goto label1;

     label7:
        r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_> = r2;
        $r43 = newarray (char)[1024];
        r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_> = $r43;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        goto label2;

     label8:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMisc()>();
        goto label3;
    }

    public void <init>(java.lang.String, char[], com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String r1, r4;
        char[] r2;
        com.hp.hpl.sparta.ParseLog r3;
        com.hp.hpl.sparta.ParseHandler r5;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: char[];
        r3 := @parameter2: com.hp.hpl.sparta.ParseLog;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: com.hp.hpl.sparta.ParseHandler;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,char[],com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>(r1, null, r2, r3, r4, r5);
        return;
    }

    private int fillBuf() throws java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        char[] $r1, $r3, $r4;
        java.io.Reader $r2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_>;
        if $z0 == 0 goto label0;

        return -1;

     label0:
        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i2 = lengthof $r1;
        if $i1 != $i2 goto label1;

        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = 0;
        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;

     label1:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: java.io.Reader reader_>;
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i4 = lengthof $r4;
        $i5 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i6 = $i4 - $i5;
        i0 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>($r3, $i3, $i6);
        if i0 > 0 goto label2;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_> = 1;
        return -1;

     label2:
        $i7 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i8 = i0 + $i7;
        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = $i8;
        return i0;
    }

    private int fillBuf(int) throws java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i15;
        boolean $z0;
        char[] $r1, $r2, $r3;
        char $c14;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        i0 := @parameter0: int;
        $z0 = r0.<com.hp.hpl.sparta.ParseCharStream: boolean eos_>;
        if $z0 == 0 goto label1;

        i1 = -1;

     label0:
        return i1;

     label1:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i2 = lengthof $r1;
        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i4 = $i2 - $i3;
        if $i4 >= i0 goto label6;

        i5 = 0;

     label2:
        $i6 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i7 = i5 + $i6;
        $i8 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        if $i7 < $i8 goto label4;

        $i9 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i10 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        i1 = $i9 - $i10;
        r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_> = i1;
        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = 0;

     label3:
        i11 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        if i11 != -1 goto label5;

        if i1 != 0 goto label0;

        return -1;

     label4:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i12 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i13 = i5 + $i12;
        $c14 = $r3[$i13];
        $r2[i5] = $c14;
        i5 = i5 + 1;
        goto label2;

     label5:
        $i15 = i1 + i11;
        return $i15;

     label6:
        i1 = 0;
        goto label3;
    }

    private boolean isCdSect() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_CDATA>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private final boolean isChar(char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, $c5;
        int $i1, $i2, $i3, $i4;
        com.hp.hpl.sparta.ParseException $r1;
        char[] $r2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 := @parameter0: char;
        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        if $i1 < $i2 goto label0;

        $i3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        if $i3 != -1 goto label0;

        $r1 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "unexpected end of expression.");
        throw $r1;

     label0:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i4 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $c5 = $r2[$i4];
        if $c5 != c0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final boolean isChar(char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, c1, c6;
        int $i2, $i3, $i4, $i5;
        char[] $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        if $i2 < $i3 goto label0;

        $i4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        if $i4 != -1 goto label0;

        return 0;

     label0:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i5 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        c6 = $r1[$i5];
        if c6 == c0 goto label1;

        if c6 != c1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private final boolean isChar(char, char, char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, c1, c2, c3, c8;
        int $i4, $i5, $i6, $i7;
        char[] $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        c2 := @parameter2: char;
        c3 := @parameter3: char;
        $i4 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i5 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        if $i4 < $i5 goto label0;

        $i6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        if $i6 != -1 goto label0;

        return 0;

     label0:
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i7 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        c8 = $r1[$i7];
        if c8 == c0 goto label1;

        if c8 == c1 goto label1;

        if c8 == c2 goto label1;

        if c8 != c3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private final boolean isComment() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_BEGIN>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private boolean isDeclSep() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPeReference()>();
        if $z0 != 0 goto label0;

        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z1 == 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    private boolean isDocTypeDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] DOCTYPE_BEGIN>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private boolean isETag() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_ETAG>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private boolean isEncodingDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENCODING>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private boolean isEntityDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENTITY_BEGIN>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private final boolean isEntityValue() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char)>(39, 34);
        return $z0;
    }

    private static boolean isExtender(char)
    {
        char c0;

        c0 := @parameter0: char;
        lookupswitch(c0)
        {
            case 183: goto label1;
            case 720: goto label1;
            case 721: goto label1;
            case 903: goto label1;
            case 1600: goto label1;
            case 3654: goto label1;
            case 3782: goto label1;
            case 12293: goto label1;
            case 12337: goto label1;
            case 12338: goto label1;
            case 12339: goto label1;
            case 12340: goto label1;
            case 12341: goto label1;
            case 12445: goto label1;
            case 12446: goto label1;
            case 12540: goto label1;
            case 12541: goto label1;
            case 12542: goto label1;
            default: goto label0;
        };

     label0:
        return 0;

     label1:
        return 1;
    }

    private boolean isExternalId() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        if $z0 != 0 goto label0;

        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC>;
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r2);
        if $z1 == 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    private static final boolean isIn(char, char[])
    {
        char c0, $c3;
        char[] r0;
        int i1, $i2;

        c0 := @parameter0: char;
        r0 := @parameter1: char[];
        i1 = 0;

     label0:
        $i2 = lengthof r0;
        if i1 < $i2 goto label1;

        return 0;

     label1:
        $c3 = r0[i1];
        if c0 != $c3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;
        goto label0;
    }

    private static boolean isLetter(char)
    {
        char c0, $c1;
        java.lang.String $r0;
        int $i2;

        c0 := @parameter0: char;
        $r0 = "abcdefghijklmnopqrstuvwxyz";
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);
        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>($c1);
        if $i2 == -1 goto label0;

        return 1;

     label0:
        return 0;
    }

    private boolean isMisc() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();
        if $z0 != 0 goto label0;

        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();
        if $z1 != 0 goto label0;

        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z2 == 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    private boolean isNameChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0;
        boolean[] $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();
        if c0 >= 128 goto label0;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: boolean[] IS_NAME_CHAR>;
        $z0 = $r1[c0];
        return $z0;

     label0:
        $z1 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isNameChar(char)>(c0);
        return $z1;
    }

    private static boolean isNameChar(char)
    {
        char c0;
        char[] $r0;
        boolean $z0, $z1, $z2, $z3;

        c0 := @parameter0: char;
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);
        if $z0 != 0 goto label0;

        $z1 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isLetter(char)>(c0);
        if $z1 != 0 goto label0;

        $r0 = <com.hp.hpl.sparta.ParseCharStream: char[] NAME_PUNCT_CHARS>;
        $z2 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isIn(char,char[])>(c0, $r0);
        if $z2 != 0 goto label0;

        $z3 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isExtender(char)>(c0);
        if $z3 == 0 goto label1;

     label0:
        return 1;

     label1:
        return 0;
    }

    private boolean isPeReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(37);
        return $z0;
    }

    private final boolean isPi() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PI_BEGIN>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private final boolean isReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(38);
        return $z0;
    }

    private final boolean isS() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char,char,char)>(32, 9, 13, 10);
        return $z0;
    }

    private final boolean isSymbol(char[]) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13;
        char $c8, $c14, $c15;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: char[];
        i0 = lengthof r1;
        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i4 = $i2 - $i3;
        if $i4 >= i0 goto label0;

        $i5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf(int)>(i0);
        if $i5 > 0 goto label0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = -1;
        return 0;

     label0:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i6 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i7 = $i6 - 1;
        $c8 = $r2[$i7];
        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $c8;
        $i9 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i10 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i11 = $i9 - $i10;
        if $i11 >= i0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 < i0 goto label3;

        return 1;

     label3:
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i12 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i13 = i1 + $i12;
        $c14 = $r3[$i13];
        $c15 = r1[i1];
        if $c14 == $c15 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;
        goto label2;
    }

    private boolean isVersionNumChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0;
        boolean $z0, $z1;
        char[] $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);
        if $z0 != 0 goto label2;

        if 97 > c0 goto label0;

        if c0 <= 122 goto label2;

     label0:
        if 90 > c0 goto label1;

        if c0 <= 90 goto label2;

     label1:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] VERSIONNUM_PUNC_CHARS>;
        $z1 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isIn(char,char[])>(c0, $r1);
        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private boolean isXmlDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] XML_BEGIN>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        return $z0;
    }

    private final char peekChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int $i0, $i1, $i2, $i3;
        com.hp.hpl.sparta.ParseException $r1;
        char[] $r2;
        char $c4;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        if $i0 < $i1 goto label0;

        $i2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        if $i2 != -1 goto label0;

        $r1 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "unexpected end of expression.");
        throw $r1;

     label0:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $c4 = $r2[$i3];
        return $c4;
    }

    private java.lang.String readAttValue() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, $c1;
        java.lang.StringBuffer r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);
        r1 = new java.lang.StringBuffer;
        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(c0);
        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(c0);
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isReference()>();
        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char[] readReference()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);
        goto label0;

     label2:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);
        goto label0;
    }

    private void readAttribute(com.hp.hpl.sparta.Element) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.Element r1;
        java.lang.String r2, r3, $r4, $r12, $r13;
        com.hp.hpl.sparta.ParseLog $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEq()>();
        r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readAttValue()>();
        $r4 = virtualinvoke r1.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>(r2);
        if $r4 == null goto label0;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Element ");
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" contains attribute ");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("more than once");
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();
        $r13 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r12, $r13, $i0);

     label0:
        virtualinvoke r1.<com.hp.hpl.sparta.Element: void setAttribute(java.lang.String,java.lang.String)>(r2, r3);
        return;
    }

    private void readCdSect() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r3, $r4, $r5, r8, $r11, $r14, $r15, $r18;
        java.lang.StringBuffer r2, r10, r13;
        int i0, $i1;
        boolean $z0;
        java.lang.String $r7;
        com.hp.hpl.sparta.ParseHandler $r9, $r17;
        char $c2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_CDATA>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        r2 = null;
        i0 = 0;

     label0:
        $r3 = <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r3);
        if $z0 == 0 goto label1;

        $r4 = <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r4);
        if r2 == null goto label5;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r5, 0, i0);
        $r7 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        r8 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();
        $r9 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        $i1 = lengthof r8;
        interfaceinvoke $r9.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>(r8, 0, $i1);
        return;

     label1:
        if i0 < 255 goto label3;

        if r2 != null goto label4;

        r10 = new java.lang.StringBuffer;
        specialinvoke r10.<java.lang.StringBuffer: void <init>(int)>(i0);
        $r11 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        virtualinvoke r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r11, 0, i0);
        r13 = r10;

     label2:
        r2 = r13;
        i0 = 0;

     label3:
        $r14 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        $c2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        $r14[i0] = $c2;
        i0 = i0 + 1;
        goto label0;

     label4:
        $r15 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r15, 0, i0);
        r13 = r2;
        goto label2;

     label5:
        $r17 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        $r18 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        interfaceinvoke $r17.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r18, 0, i0);
        return;
    }

    private final char readChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8;
        com.hp.hpl.sparta.ParseException $r1;
        char[] $r2, $r3;
        char $c5, $c9;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $i1 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        if $i1 < $i2 goto label0;

        $i3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf()>();
        if $i3 != -1 goto label0;

        $r1 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "unexpected end of expression.");
        throw $r1;

     label0:
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i4 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $c5 = $r2[$i4];
        if $c5 != 10 goto label1;

        $i6 = r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_>;
        $i7 = 1 + $i6;
        r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_> = $i7;

     label1:
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i8 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        i0 = $i8 + 1;
        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = i0;
        $c9 = $r3[$i8];
        return $c9;
    }

    private final char readChar(char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, c1, c2;
        char[] r1;
        com.hp.hpl.sparta.ParseException $r2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        c2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        if c2 == c0 goto label0;

        if c2 == c1 goto label0;

        $r2 = new com.hp.hpl.sparta.ParseException;
        r1 = newarray (char)[2];
        r1[0] = c0;
        r1[1] = c1;
        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,char[])>(r0, c2, r1);
        throw $r2;

     label0:
        return c2;
    }

    private final char readChar(char, char, char, char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, c1, c2, c3, c4;
        char[] r1;
        com.hp.hpl.sparta.ParseException $r2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 := @parameter0: char;
        c1 := @parameter1: char;
        c2 := @parameter2: char;
        c3 := @parameter3: char;
        c4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        if c4 == c0 goto label0;

        if c4 == c1 goto label0;

        if c4 == c2 goto label0;

        if c4 == c3 goto label0;

        $r2 = new com.hp.hpl.sparta.ParseException;
        r1 = newarray (char)[4];
        r1[0] = c0;
        r1[1] = c1;
        r1[2] = c2;
        r1[3] = c3;
        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,char[])>(r0, c4, r1);
        throw $r2;

     label0:
        return c4;
    }

    private final void readChar(char) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, c1;
        com.hp.hpl.sparta.ParseException $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 := @parameter0: char;
        c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        if c1 == c0 goto label0;

        $r1 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,char)>(r0, c1, c0);
        throw $r1;

     label0:
        return;
    }

    private char readCharRef() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r3, $r4;
        byte b0;
        int i1, i2, i4, $i7, $i8;
        java.lang.String r2, $r6, r14, $r17, $r18;
        boolean $z0, $z1;
        char $c5, $c6;
        com.hp.hpl.sparta.ParseLog $r5, r9;
        java.lang.NumberFormatException $r7, r8;
        java.lang.StringBuffer $r10, $r11, $r12, r13, $r15, $r16;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] CHARREF_BEGIN>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        b0 = 10;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(120);
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        b0 = 16;

     label0:
        i1 = 0;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(59);
        if $z1 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(59);
        r2 = new java.lang.String;
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        specialinvoke r2.<java.lang.String: void <init>(char[],int,int)>($r3, 0, i1);

     label2:
        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r2, b0);

     label3:
        $c5 = (char) i4;
        return $c5;

     label4:
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        i2 = i1 + 1;
        $c6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        $r4[i1] = $c6;
        if i2 < 255 goto label8;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r6 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i7 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>("Tmp buffer overflow on readCharRef", $r6, $i7);
        return 32;

     label5:
        $r7 := @caughtexception;
        r8 = $r7;
        r9 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);
        r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not a valid ");
        if b0 != 16 goto label7;

        r14 = "hexadecimal";

     label6:
        $r15 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" number");
        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();
        $r18 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i8 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke r9.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r17, $r18, $i8);
        return 32;

     label7:
        r14 = "decimal";
        goto label6;

     label8:
        i1 = i2;
        goto label1;

        catch java.lang.NumberFormatException from label2 to label3 with label5;
    }

    private final void readComment() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_BEGIN>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

     label0:
        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_END>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r2);
        if $z0 == 0 goto label1;

        $r3 = <com.hp.hpl.sparta.ParseCharStream: char[] COMMENT_END>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r3);
        return;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label0;
    }

    private void readContent() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        char[] r1;
        com.hp.hpl.sparta.ParseHandler $r2;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPossibleCharData()>();
        z0 = 1;

     label0:
        if z0 != 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isETag()>();
        if $z1 == 0 goto label3;

        z0 = 0;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPossibleCharData()>();
        goto label0;

     label3:
        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isReference()>();
        if $z2 == 0 goto label4;

        r1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char[] readReference()>();
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        $i0 = lengthof r1;
        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>(r1, 0, $i0);
        goto label2;

     label4:
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isCdSect()>();
        if $z3 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readCdSect()>();
        goto label2;

     label5:
        $z4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();
        if $z4 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPi()>();
        goto label2;

     label6:
        $z5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();
        if $z5 == 0 goto label7;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readComment()>();
        goto label2;

     label7:
        $z6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(60);
        if $z6 == 0 goto label8;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.Element readElement()>();
        goto label2;

     label8:
        z0 = 0;
        goto label2;
    }

    private void readDeclSep() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPeReference()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readPeReference()>();
        return;

     label0:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        return;
    }

    private void readDocTypeDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] DOCTYPE_BEGIN>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String docTypeName_> = $r2;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(62);
        if $z1 != 0 goto label0;

        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(91);
        if $z2 != 0 goto label0;

        r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalDtd_> = 1;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readExternalId()>();
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z3 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label0:
        $z4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(91);
        if $z4 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label1:
        $z5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(93);
        if $z5 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(93);
        $z6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z6 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);
        return;

     label3:
        $z7 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isDeclSep()>();
        if $z7 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readDeclSep()>();
        goto label1;

     label4:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMarkupDecl()>();
        goto label1;
    }

    private void readETag(com.hp.hpl.sparta.Element) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.Element r1;
        char[] $r2;
        java.lang.String r3, $r4, $r10, $r13, $r14;
        boolean $z0, $z1;
        com.hp.hpl.sparta.ParseLog $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r11, $r12;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] BEGIN_ETAG>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r2);
        r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        $r4 = virtualinvoke r1.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);
        if $z0 != 0 goto label0;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("end tag (");
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") does not match begin tag (");
        $r10 = virtualinvoke r1.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        $r14 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r13, $r14, $i0);

     label0:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);
        return;
    }

    private final com.hp.hpl.sparta.Element readElement() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.Element r1;
        boolean $z0;
        com.hp.hpl.sparta.ParseHandler $r2, $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 = new com.hp.hpl.sparta.Element;
        specialinvoke r1.<com.hp.hpl.sparta.Element: void <init>()>();
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean readEmptyElementTagOrSTag(com.hp.hpl.sparta.Element)>(r1);
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void startElement(com.hp.hpl.sparta.Element)>(r1);
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readContent()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readETag(com.hp.hpl.sparta.Element)>(r1);

     label0:
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        interfaceinvoke $r3.<com.hp.hpl.sparta.ParseHandler: void endElement(com.hp.hpl.sparta.Element)>(r1);
        return r1;
    }

    private boolean readEmptyElementTagOrSTag(com.hp.hpl.sparta.Element) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.Element r1;
        java.lang.String $r2;
        boolean $z0, $z1, z2, $z3;
        char[] $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(60);
        $r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        virtualinvoke r1.<com.hp.hpl.sparta.Element: void setTagName(java.lang.String)>($r2);

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label1:
        z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(62);
        if z2 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);
        return z2;

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char)>(47, 62);
        if $z3 != 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readAttribute(com.hp.hpl.sparta.Element)>(r1);
        goto label0;

     label3:
        $r3 = <com.hp.hpl.sparta.ParseCharStream: char[] END_EMPTYTAG>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r3);
        return z2;
    }

    private java.lang.String readEncodingDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        char c0, $c1;
        java.lang.StringBuffer r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENCODING>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEq()>();
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);
        r2 = new java.lang.StringBuffer;
        specialinvoke r2.<java.lang.StringBuffer: void <init>()>();

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(c0);
        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(c0);
        $r3 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;

     label1:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);
        goto label0;
    }

    private void readEntityDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r10, $r11;
        java.lang.String r2, r3, r6, r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Hashtable $r4, $r8;
        com.hp.hpl.sparta.ParseException $r13;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] ENTITY_BEGIN>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(37);
        if $z0 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(37);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEntityValue()>();
        if $z1 == 0 goto label3;

        r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEntityValue()>();

     label0:
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable pes_>;
        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label1:
        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z2 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label2:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);
        return;

     label3:
        r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readExternalId()>();
        goto label0;

     label4:
        r6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEntityValue()>();
        if $z3 == 0 goto label6;

        r7 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEntityValue()>();

     label5:
        $r8 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);
        goto label1;

     label6:
        $z4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalId()>();
        if $z4 == 0 goto label8;

        r7 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readExternalId()>();
        $z5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z5 == 0 goto label7;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label7:
        $r10 = <com.hp.hpl.sparta.ParseCharStream: char[] NDATA>;
        $z6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r10);
        if $z6 == 0 goto label5;

        $r11 = <com.hp.hpl.sparta.ParseCharStream: char[] NDATA>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r11);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        goto label5;

     label8:
        $r13 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r13.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting double-quote, \"PUBLIC\" or \"SYSTEM\" while reading entity declaration");
        throw $r13;
    }

    private java.lang.String readEntityRef() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String r1, r2, $r10, $r11, $r17, $r18;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        boolean $z0;
        com.hp.hpl.sparta.ParseLog $r5, $r12;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r13, $r14, $r15, $r16;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(38);
        r1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable entities_>;
        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.String) $r4;
        if r2 != null goto label0;

        r2 = "";
        $z0 = r0.<com.hp.hpl.sparta.ParseCharStream: boolean isExternalDtd_>;
        if $z0 == 0 goto label1;

        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&");
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; not found -- possibly defined in external DTD)");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        $r11 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r10, $r11, $i0);

     label0:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(59);
        return r2;

     label1:
        $r12 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r13 = new java.lang.StringBuffer;
        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No declaration of &");
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();
        $r18 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i1 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r12.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r17, $r18, $i1);
        goto label0;
    }

    private final java.lang.String readEntityValue() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, $c1;
        java.lang.StringBuffer r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2, $r3;
        char[] $r5;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);
        r1 = new java.lang.StringBuffer;
        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(c0);
        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(c0);
        $r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r2;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPeReference()>();
        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readPeReference()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);
        goto label0;

     label2:
        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isReference()>();
        if $z2 == 0 goto label3;

        $r5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char[] readReference()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r5);
        goto label0;

     label3:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);
        goto label0;
    }

    private final void readEq() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label0:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(61);
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label1:
        return;
    }

    private java.lang.String readExternalId() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r2, $r3, $r4;
        boolean $z0, $z1;
        com.hp.hpl.sparta.ParseException $r5;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        if $z0 == 0 goto label1;

        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] SYSTEM>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r2);

     label0:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSystemLiteral()>();
        return "(WARNING: external ID not read)";

     label1:
        $r3 = <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC>;
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r3);
        if $z1 == 0 goto label2;

        $r4 = <com.hp.hpl.sparta.ParseCharStream: char[] PUBLIC>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r4);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPubidLiteral()>();
        goto label0;

     label2:
        $r5 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r5.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting \"SYSTEM\" or \"PUBLIC\" while reading external ID");
        throw $r5;
    }

    private void readMarkupDecl() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        char c0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.sparta.ParseException $r2;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPi()>();
        return;

     label0:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();
        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readComment()>();
        return;

     label1:
        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEntityDecl()>();
        if $z2 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEntityDecl()>();
        return;

     label2:
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] MARKUPDECL_BEGIN>;
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        if $z3 == 0 goto label8;

     label3:
        $z4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(62);
        if $z4 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(62);
        return;

     label4:
        $z5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char)>(39, 34);
        if $z5 == 0 goto label7;

        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label5:
        $z6 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(c0);
        if $z6 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(c0);
        goto label3;

     label6:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label5;

     label7:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label3;

     label8:
        $r2 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting processing instruction, comment, or \"<!\"");
        throw $r2;
    }

    private void readMisc() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.sparta.ParseException $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isComment()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readComment()>();
        return;

     label0:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isPi()>();
        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readPi()>();
        return;

     label1:
        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z2 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        return;

     label2:
        $r1 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String)>(r0, "expecting comment or processing instruction or space");
        throw $r1;
    }

    private final java.lang.String readName() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.StringBuffer r1, r6, r9;
        int i0;
        char[] $r2, $r4, $r7, $r10, $r11, $r13;
        char $c1, $c2;
        boolean $z0;
        java.lang.String $r3, $r5, $r15;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readNameStartChar()>();
        $r2[0] = $c1;
        r1 = null;
        i0 = 1;

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isNameChar()>();
        if $z0 != 0 goto label1;

        if r1 != null goto label5;

        $r3 = new java.lang.String;
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r4, 0, i0);
        $r5 = staticinvoke <com.hp.hpl.sparta.Sparta: java.lang.String intern(java.lang.String)>($r3);
        return $r5;

     label1:
        if i0 < 255 goto label3;

        if r1 != null goto label4;

        r6 = new java.lang.StringBuffer;
        specialinvoke r6.<java.lang.StringBuffer: void <init>(int)>(i0);
        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r7, 0, i0);
        r9 = r6;

     label2:
        r1 = r9;
        i0 = 0;

     label3:
        $r10 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        $c2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        $r10[i0] = $c2;
        i0 = i0 + 1;
        goto label0;

     label4:
        $r11 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r11, 0, i0);
        r9 = r1;
        goto label2;

     label5:
        $r13 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>($r13, 0, i0);
        $r15 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r15;
    }

    private char readNameStartChar() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0;
        boolean $z0;
        com.hp.hpl.sparta.ParseException $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        $z0 = staticinvoke <com.hp.hpl.sparta.ParseCharStream: boolean isLetter(char)>(c0);
        if $z0 != 0 goto label0;

        if c0 == 95 goto label0;

        if c0 == 58 goto label0;

        $r1 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r1.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,char,java.lang.String)>(r0, c0, "letter, underscore, colon");
        throw $r1;

     label0:
        return c0;
    }

    private java.lang.String readPeReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String r1, r2, $r10, $r11;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        com.hp.hpl.sparta.ParseLog $r5;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(37);
        r1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readName()>();
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: java.util.Hashtable pes_>;
        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);
        r2 = (java.lang.String) $r4;
        if r2 != null goto label0;

        r2 = "";
        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        $r6 = new java.lang.StringBuffer;
        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();
        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No declaration of %");
        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();
        $r11 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $i0 = virtualinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        interfaceinvoke $r5.<com.hp.hpl.sparta.ParseLog: void warning(java.lang.String,java.lang.String,int)>($r10, $r11, $i0);

     label0:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(59);
        return r2;
    }

    private final void readPi() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] PI_BEGIN>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);

     label0:
        $r2 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r2);
        if $z0 == 0 goto label1;

        $r3 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r3);
        return;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label0;
    }

    private void readPossibleCharData() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int i0;
        boolean $z0, $z1, $z2;
        char[] $r1, $r3, $r4, $r5, $r6, $r8;
        com.hp.hpl.sparta.ParseHandler $r2, $r7;
        char $c1, $c2, $c3, $c4;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        i0 = 0;

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(60);
        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char)>(38);
        if $z1 != 0 goto label1;

        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] END_CDATA>;
        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        if $z2 == 0 goto label3;

     label1:
        if i0 <= 0 goto label2;

        $r2 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        interfaceinvoke $r2.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r3, 0, i0);

     label2:
        return;

     label3:
        $r4 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        $r4[i0] = $c1;
        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        $c2 = $r5[i0];
        if $c2 != 13 goto label4;

        $c3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();
        if $c3 != 10 goto label4;

        $r6 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        $c4 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        $r6[i0] = $c4;

     label4:
        i0 = i0 + 1;
        if i0 != 255 goto label0;

        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseHandler handler_>;
        $r8 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] tmpBuf_>;
        interfaceinvoke $r7.<com.hp.hpl.sparta.ParseHandler: void characters(char[],int,int)>($r8, 0, 255);
        i0 = 0;
        goto label0;
    }

    private void readProlog() throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isXmlDecl()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readXmlDecl()>();

     label0:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isMisc()>();
        if $z1 != 0 goto label3;

        $z2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isDocTypeDecl()>();
        if $z2 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readDocTypeDecl()>();

     label1:
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isMisc()>();
        if $z3 != 0 goto label4;

     label2:
        return;

     label3:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMisc()>();
        goto label0;

     label4:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readMisc()>();
        goto label1;
    }

    private final void readPubidLiteral() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSystemLiteral()>();
        return;
    }

    private final char[] readReference() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r2, $r4;
        boolean $z0;
        char $c0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] CHARREF_BEGIN>;
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r1);
        if $z0 == 0 goto label0;

        $r2 = newarray (char)[1];
        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readCharRef()>();
        $r2[0] = $c0;
        return $r2;

     label0:
        $r3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEntityRef()>();
        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();
        return $r4;
    }

    private final void readS() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char,char,char)>(32, 9, 13, 10);

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isChar(char,char,char,char)>(32, 9, 13, 10);
        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label0;
    }

    private final void readSymbol(char[]) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] r1, $r3, $r5, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i18;
        com.hp.hpl.sparta.ParseException $r2, $r4, $r6;
        char $c8, $c16, $c17;
        java.lang.String $r7;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        r1 := @parameter0: char[];
        i0 = lengthof r1;
        $i2 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i3 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i4 = $i2 - $i3;
        if $i4 >= i0 goto label0;

        $i5 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: int fillBuf(int)>(i0);
        if $i5 > 0 goto label0;

        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = -1;
        $r2 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r2.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,char[])>(r0, "end of XML file", r1);
        throw $r2;

     label0:
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i6 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i7 = $i6 - 1;
        $c8 = $r3[$i7];
        r0.<com.hp.hpl.sparta.ParseCharStream: int ch_> = $c8;
        $i9 = r0.<com.hp.hpl.sparta.ParseCharStream: int endPos_>;
        $i10 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i11 = $i9 - $i10;
        if $i11 >= i0 goto label1;

        $r4 = new com.hp.hpl.sparta.ParseException;
        specialinvoke $r4.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,char[])>(r0, "end of XML file", r1);
        throw $r4;

     label1:
        i1 = 0;

     label2:
        if i1 < i0 goto label3;

        $i12 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i13 = i0 + $i12;
        r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_> = $i13;
        return;

     label3:
        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i14 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        $i15 = i1 + $i14;
        $c16 = $r5[$i15];
        $c17 = r1[i1];
        if $c16 == $c17 goto label4;

        $r6 = new com.hp.hpl.sparta.ParseException;
        $r7 = new java.lang.String;
        $r8 = r0.<com.hp.hpl.sparta.ParseCharStream: char[] cbuf_>;
        $i18 = r0.<com.hp.hpl.sparta.ParseCharStream: int curPos_>;
        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r8, $i18, i0);
        specialinvoke $r6.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseCharStream,java.lang.String,char[])>(r0, $r7, r1);
        throw $r6;

     label4:
        i1 = i1 + 1;
        goto label2;
    }

    private final void readSystemLiteral() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char c0, $c1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label0:
        $c1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char peekChar()>();
        if $c1 != c0 goto label1;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>(c0);
        return;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label0;
    }

    private void readVersionInfo() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1;
        char $c0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] VERSION>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readEq()>();
        $c0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar(char,char)>(39, 34);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readVersionNum()>();
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readChar(char)>($c0);
        return;
    }

    private void readVersionNum() throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label0:
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isVersionNumChar()>();
        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();
        goto label0;
    }

    private void readXmlDecl() throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.EncodingMismatchException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        char[] $r1, $r9, $r10;
        java.lang.String r2, $r3, $r4, $r5, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.sparta.EncodingMismatchException $r6;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = <com.hp.hpl.sparta.ParseCharStream: char[] XML_BEGIN>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r1);
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readVersionInfo()>();
        $z0 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isS()>();
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readS()>();

     label0:
        $z1 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isEncodingDecl()>();
        if $z1 == 0 goto label2;

        r2 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String readEncodingDecl()>();
        $r3 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_>;
        if $r3 == null goto label2;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();
        $r5 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_>;
        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);
        if $z2 != 0 goto label2;

        $r6 = new com.hp.hpl.sparta.EncodingMismatchException;
        $r7 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        $r8 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String encoding_>;
        specialinvoke $r6.<com.hp.hpl.sparta.EncodingMismatchException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r2, $r8);
        throw $r6;

     label1:
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: char readChar()>();

     label2:
        $r9 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;
        $z3 = specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: boolean isSymbol(char[])>($r9);
        if $z3 == 0 goto label1;

        $r10 = <com.hp.hpl.sparta.ParseCharStream: char[] QU_END>;
        specialinvoke r0.<com.hp.hpl.sparta.ParseCharStream: void readSymbol(char[])>($r10);
        return;
    }

    final java.lang.String getHistory()
    {
        com.hp.hpl.sparta.ParseCharStream r0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        return "";
    }

    int getLastCharRead()
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int ch_>;
        return $i0;
    }

    public int getLineNumber()
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $i0 = r0.<com.hp.hpl.sparta.ParseCharStream: int lineNumber_>;
        return $i0;
    }

    com.hp.hpl.sparta.ParseLog getLog()
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        com.hp.hpl.sparta.ParseLog $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: com.hp.hpl.sparta.ParseLog log_>;
        return $r1;
    }

    public java.lang.String getSystemId()
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        return $r1;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.sparta.ParseCharStream r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.sparta.ParseCharStream;
        $r1 = r0.<com.hp.hpl.sparta.ParseCharStream: java.lang.String systemId_>;
        return $r1;
    }
}
