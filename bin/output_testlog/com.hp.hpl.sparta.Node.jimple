public abstract class com.hp.hpl.sparta.Node extends java.lang.Object
{
    private java.lang.Object annotation_;
    private com.hp.hpl.sparta.Document doc_;
    private int hash_;
    private com.hp.hpl.sparta.Node nextSibling_;
    private com.hp.hpl.sparta.Element parentNode_;
    private com.hp.hpl.sparta.Node previousSibling_;

    public void <init>()
    {
        com.hp.hpl.sparta.Node r0;

        r0 := @this: com.hp.hpl.sparta.Node;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_> = null;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element parentNode_> = null;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = null;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = null;
        r0.<com.hp.hpl.sparta.Node: java.lang.Object annotation_> = null;
        r0.<com.hp.hpl.sparta.Node: int hash_> = 0;
        return;
    }

    protected static void htmlEncode(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.String r1, r6;
        int i0, i1, i2, $i4, $i5;
        char c3;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.io.Writer;
        r1 := @parameter1: java.lang.String;
        i0 = 0;
        i1 = virtualinvoke r1.<java.lang.String: int length()>();
        i2 = 0;

     label0:
        if i0 < i1 goto label2;

        if i2 >= i1 goto label1;

        $i4 = i1 - i2;
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i2, $i4);

     label1:
        return;

     label2:
        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);
        if c3 < 128 goto label5;

        $r2 = new java.lang.StringBuffer;
        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#");
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(c3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");
        r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        if r6 == null goto label4;

        $i5 = i0 - i2;
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String,int,int)>(r1, i2, $i5);
        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>(r6);
        i2 = i0 + 1;

     label4:
        i0 = i0 + 1;
        goto label0;

     label5:
        lookupswitch(c3)
        {
            case 34: goto label10;
            case 38: goto label9;
            case 39: goto label11;
            case 60: goto label7;
            case 62: goto label8;
            default: goto label6;
        };

     label6:
        r6 = null;
        goto label3;

     label7:
        r6 = "&lt;";
        goto label3;

     label8:
        r6 = "&gt;";
        goto label3;

     label9:
        r6 = "&amp;";
        goto label3;

     label10:
        r6 = "&quot;";
        goto label3;

     label11:
        r6 = "&#39;";
        goto label3;
    }

    public abstract java.lang.Object clone();

    protected abstract int computeHashCode();

    public java.lang.Object getAnnotation()
    {
        com.hp.hpl.sparta.Node r0;
        java.lang.Object $r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        $r1 = r0.<com.hp.hpl.sparta.Node: java.lang.Object annotation_>;
        return $r1;
    }

    public com.hp.hpl.sparta.Node getNextSibling()
    {
        com.hp.hpl.sparta.Node r0, $r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        return $r1;
    }

    public com.hp.hpl.sparta.Document getOwnerDocument()
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Document $r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_>;
        return $r1;
    }

    public com.hp.hpl.sparta.Element getParentNode()
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Element $r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element parentNode_>;
        return $r1;
    }

    public com.hp.hpl.sparta.Node getPreviousSibling()
    {
        com.hp.hpl.sparta.Node r0, $r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        return $r1;
    }

    public int hashCode()
    {
        com.hp.hpl.sparta.Node r0;
        int $i0, $i1, $i2;

        r0 := @this: com.hp.hpl.sparta.Node;
        $i0 = r0.<com.hp.hpl.sparta.Node: int hash_>;
        if $i0 != 0 goto label0;

        $i1 = virtualinvoke r0.<com.hp.hpl.sparta.Node: int computeHashCode()>();
        r0.<com.hp.hpl.sparta.Node: int hash_> = $i1;

     label0:
        $i2 = r0.<com.hp.hpl.sparta.Node: int hash_>;
        return $i2;
    }

    void insertAtEndOfLinkedList(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Node r0, r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: com.hp.hpl.sparta.Node;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = r1;
        if r1 == null goto label0;

        r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = r0;

     label0:
        return;
    }

    com.hp.hpl.sparta.Element makeMatching(com.hp.hpl.sparta.Element, com.hp.hpl.sparta.xpath.Step, java.lang.String) throws com.hp.hpl.sparta.ParseException, com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Element r1, r6;
        com.hp.hpl.sparta.xpath.Step r2;
        java.lang.String r3, $r13, r15;
        com.hp.hpl.sparta.xpath.NodeTest r4;
        java.lang.StringBuffer $r5, $r8, $r9, $r10, $r11, $r12;
        boolean $z0;
        com.hp.hpl.sparta.ParseException $r7;
        com.hp.hpl.sparta.xpath.ElementTest $r14;
        com.hp.hpl.sparta.xpath.BooleanExpr $r16;
        com.hp.hpl.sparta.Node$1 $r17;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        r2 := @parameter1: com.hp.hpl.sparta.xpath.Step;
        r3 := @parameter2: java.lang.String;
        r4 = virtualinvoke r2.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest getNodeTest()>();
        $z0 = r4 instanceof com.hp.hpl.sparta.xpath.ElementTest;
        if $z0 != 0 goto label0;

        $r7 = new com.hp.hpl.sparta.ParseException;
        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" in \"");
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not an element test");
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r7.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r13);
        throw $r7;

     label0:
        r6 = new com.hp.hpl.sparta.Element;
        $r14 = (com.hp.hpl.sparta.xpath.ElementTest) r4;
        r15 = virtualinvoke $r14.<com.hp.hpl.sparta.xpath.ElementTest: java.lang.String getTagName()>();
        specialinvoke r6.<com.hp.hpl.sparta.Element: void <init>(java.lang.String)>(r15);
        $r16 = virtualinvoke r2.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr getPredicate()>();
        $r17 = new com.hp.hpl.sparta.Node$1;
        specialinvoke $r17.<com.hp.hpl.sparta.Node$1: void <init>(com.hp.hpl.sparta.Node,com.hp.hpl.sparta.Element,com.hp.hpl.sparta.Element,java.lang.String,java.lang.String)>(r0, r6, r1, r3, r15);
        virtualinvoke $r16.<com.hp.hpl.sparta.xpath.BooleanExpr: void accept(com.hp.hpl.sparta.xpath.BooleanExprVisitor)>($r17);
        return r6;
    }

    void notifyObservers()
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Document $r1, $r2;

        r0 := @this: com.hp.hpl.sparta.Node;
        r0.<com.hp.hpl.sparta.Node: int hash_> = 0;
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_>;
        if $r1 == null goto label0;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_>;
        virtualinvoke $r2.<com.hp.hpl.sparta.Document: void notifyObservers()>();

     label0:
        return;
    }

    void removeFromLinkedList()
    {
        com.hp.hpl.sparta.Node r0, $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: com.hp.hpl.sparta.Node;
        $r1 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        if $r1 == null goto label0;

        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        $r3 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        $r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = $r3;

     label0:
        $r4 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        if $r4 == null goto label1;

        $r5 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        $r6 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        $r5.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = $r6;

     label1:
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = null;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = null;
        return;
    }

    void replaceInLinkedList(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Node r0, r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: com.hp.hpl.sparta.Node;
        $r2 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        if $r2 == null goto label0;

        $r3 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        $r3.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = r1;

     label0:
        $r4 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        if $r4 == null goto label1;

        $r5 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        $r5.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = r1;

     label1:
        $r6 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_>;
        r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = $r6;
        $r7 = r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_>;
        r1.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = $r7;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node nextSibling_> = null;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node previousSibling_> = null;
        return;
    }

    public void setAnnotation(java.lang.Object)
    {
        com.hp.hpl.sparta.Node r0;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: java.lang.Object;
        r0.<com.hp.hpl.sparta.Node: java.lang.Object annotation_> = r1;
        return;
    }

    void setOwnerDocument(com.hp.hpl.sparta.Document)
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Document r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: com.hp.hpl.sparta.Document;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Document doc_> = r1;
        return;
    }

    void setParentNode(com.hp.hpl.sparta.Element)
    {
        com.hp.hpl.sparta.Node r0;
        com.hp.hpl.sparta.Element r1;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        r0.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element parentNode_> = r1;
        return;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.sparta.Node r0;
        java.io.ByteArrayOutputStream r1;
        java.io.OutputStreamWriter r2;
        java.lang.String r3, $r7;
        byte[] $r4;
        java.io.IOException $r5, r6;

        r0 := @this: com.hp.hpl.sparta.Node;

     label0:
        r1 = new java.io.ByteArrayOutputStream;
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();
        r2 = new java.io.OutputStreamWriter;
        specialinvoke r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);
        virtualinvoke r0.<com.hp.hpl.sparta.Node: void toString(java.io.Writer)>(r2);
        virtualinvoke r2.<java.io.Writer: void flush()>();
        r3 = new java.lang.String;
        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        specialinvoke r3.<java.lang.String: void <init>(byte[])>($r4);

     label1:
        return r3;

     label2:
        $r5 := @caughtexception;
        r6 = $r5;
        $r7 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();
        return $r7;

        catch java.io.IOException from label0 to label1 with label2;
    }

    abstract void toString(java.io.Writer) throws java.io.IOException;

    public java.lang.String toXml() throws java.io.IOException
    {
        com.hp.hpl.sparta.Node r0;
        java.io.ByteArrayOutputStream r1;
        java.io.OutputStreamWriter r2;
        java.lang.String $r3;
        byte[] $r4;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 = new java.io.ByteArrayOutputStream;
        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();
        r2 = new java.io.OutputStreamWriter;
        specialinvoke r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1);
        virtualinvoke r0.<com.hp.hpl.sparta.Node: void toXml(java.io.Writer)>(r2);
        virtualinvoke r2.<java.io.Writer: void flush()>();
        $r3 = new java.lang.String;
        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r4);
        return $r3;
    }

    abstract void toXml(java.io.Writer) throws java.io.IOException;

    public abstract com.hp.hpl.sparta.Element xpathSelectElement(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public abstract java.util.Enumeration xpathSelectElements(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public abstract java.lang.String xpathSelectString(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public abstract java.util.Enumeration xpathSelectStrings(java.lang.String) throws com.hp.hpl.sparta.ParseException;

    public boolean xpathSetStrings(java.lang.String, java.lang.String) throws com.hp.hpl.sparta.ParseException
    {
        com.hp.hpl.sparta.Node r0, r43;
        java.lang.String r1, r2, r4, $r6, $r14, $r20, r21, $r27, $r35, $r39, $r45, $r49;
        int i0, $i1, $i2, $i4, $i6, $i8, $i9, $i10, $i11, $i12, i13;
        com.hp.hpl.sparta.DOMException r3, $r15;
        java.util.Vector r5;
        boolean $z0, z1, $z2, $z3, z4, $z5, $z6, $z7, z8;
        char $c3, $c5, $c7;
        com.hp.hpl.sparta.ParseException $r7, $r22, $r30;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r17, $r18, $r19, $r23, $r24, $r25, $r26, $r31, $r32, $r33, $r34;
        java.lang.Error $r16;
        java.lang.IndexOutOfBoundsException $r28, r29;
        java.util.Enumeration r36, r40;
        java.lang.Object $r37, $r41, $r47, $r50;
        com.hp.hpl.sparta.Element r38, r42;
        com.hp.hpl.sparta.Text r44, $r46, r48, $r51;

        r0 := @this: com.hp.hpl.sparta.Node;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;

     label0:
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(47);
        $i1 = i0 + 1;
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);
        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("text()");
        if $z0 != 0 goto label2;

        $i2 = i0 + 1;
        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);
        if $c3 == 64 goto label2;

        $r7 = new com.hp.hpl.sparta.ParseException;
        $r8 = new java.lang.StringBuffer;
        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Last step of Xpath expression \"");
        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not \"text()\" and does not start with a \'@\'. It starts with a \'");
        $i4 = i0 + 1;
        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4);
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r7.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r14);
        throw $r7;

     label1:
        $r15 := @caughtexception;
        r3 = $r15;
        $r16 = new java.lang.Error;
        $r17 = new java.lang.StringBuffer;
        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Assertion failed ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);
        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r16.<java.lang.Error: void <init>(java.lang.String)>($r20);
        throw $r16;

     label2:
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);
        $i6 = i0 + 1;
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);
        if $c7 != 64 goto label10;

        $i8 = i0 + 2;
        r21 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i8);
        $i9 = virtualinvoke r21.<java.lang.String: int length()>();
        if $i9 != 0 goto label4;

        $r22 = new com.hp.hpl.sparta.ParseException;
        $r23 = new java.lang.StringBuffer;
        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();
        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Xpath expression \"");
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" specifies zero-length attribute name\"");
        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r22.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r27);
        throw $r22;

     label3:
        $r28 := @caughtexception;
        r29 = $r28;
        $r30 = new com.hp.hpl.sparta.ParseException;
        $r31 = new java.lang.StringBuffer;
        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();
        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Xpath expression \"");
        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);
        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not in the form \"xpathExpression/@attributeName\"");
        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r30.<com.hp.hpl.sparta.ParseException: void <init>(java.lang.String)>($r35);
        throw $r30;

     label4:
        r36 = virtualinvoke r0.<com.hp.hpl.sparta.Node: java.util.Enumeration xpathSelectElements(java.lang.String)>(r4);

     label5:
        z1 = 0;

     label6:
        $z2 = interfaceinvoke r36.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z2 != 0 goto label8;

     label7:
        return z1;

     label8:
        $r37 = interfaceinvoke r36.<java.util.Enumeration: java.lang.Object nextElement()>();
        r38 = (com.hp.hpl.sparta.Element) $r37;
        $r39 = virtualinvoke r38.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>(r21);
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r39);
        if $z3 != 0 goto label6;

        virtualinvoke r38.<com.hp.hpl.sparta.Element: void setAttribute(java.lang.String,java.lang.String)>(r21, r2);

     label9:
        z1 = 1;
        goto label6;

     label10:
        r40 = virtualinvoke r0.<com.hp.hpl.sparta.Node: java.util.Enumeration xpathSelectElements(java.lang.String)>(r4);
        z4 = interfaceinvoke r40.<java.util.Enumeration: boolean hasMoreElements()>();

     label11:
        $z5 = interfaceinvoke r40.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z5 != 0 goto label13;

     label12:
        return z4;

     label13:
        $r41 = interfaceinvoke r40.<java.util.Enumeration: java.lang.Object nextElement()>();
        r42 = (com.hp.hpl.sparta.Element) $r41;
        r5 = new java.util.Vector;
        specialinvoke r5.<java.util.Vector: void <init>()>();
        r43 = virtualinvoke r42.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label14:
        if r43 != null goto label17;

     label15:
        $i10 = virtualinvoke r5.<java.util.Vector: int size()>();
        if $i10 != 0 goto label20;

        r44 = new com.hp.hpl.sparta.Text;
        specialinvoke r44.<com.hp.hpl.sparta.Text: void <init>(java.lang.String)>(r2);
        $r45 = virtualinvoke r44.<com.hp.hpl.sparta.Text: java.lang.String getData()>();
        $i11 = virtualinvoke $r45.<java.lang.String: int length()>();
        if $i11 <= 0 goto label11;

        virtualinvoke r42.<com.hp.hpl.sparta.Element: void appendChild(com.hp.hpl.sparta.Node)>(r44);

     label16:
        z4 = 1;
        goto label11;

     label17:
        $z6 = r43 instanceof com.hp.hpl.sparta.Text;
        if $z6 == 0 goto label18;

        $r46 = (com.hp.hpl.sparta.Text) r43;
        virtualinvoke r5.<java.util.Vector: void addElement(java.lang.Object)>($r46);

     label18:
        r43 = virtualinvoke r43.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();

     label19:
        goto label14;

     label20:
        $r47 = virtualinvoke r5.<java.util.Vector: java.lang.Object elementAt(int)>(0);
        r48 = (com.hp.hpl.sparta.Text) $r47;
        $r49 = virtualinvoke r48.<com.hp.hpl.sparta.Text: java.lang.String getData()>();
        $z7 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z7 != 0 goto label26;

        virtualinvoke r5.<java.util.Vector: void removeElementAt(int)>(0);
        virtualinvoke r48.<com.hp.hpl.sparta.Text: void setData(java.lang.String)>(r2);

     label21:
        z8 = 1;
        goto label27;

     label22:
        $i12 = virtualinvoke r5.<java.util.Vector: int size()>();
        if i13 < $i12 goto label24;

     label23:
        z4 = z8;
        goto label11;

     label24:
        $r50 = virtualinvoke r5.<java.util.Vector: java.lang.Object elementAt(int)>(i13);
        $r51 = (com.hp.hpl.sparta.Text) $r50;
        virtualinvoke r42.<com.hp.hpl.sparta.Element: void removeChild(com.hp.hpl.sparta.Node)>($r51);

     label25:
        i13 = i13 + 1;
        z8 = 1;
        goto label22;

     label26:
        z8 = z4;

     label27:
        i13 = 0;
        goto label22;

        catch com.hp.hpl.sparta.DOMException from label0 to label1 with label1;
        catch java.lang.IndexOutOfBoundsException from label0 to label1 with label3;
        catch com.hp.hpl.sparta.DOMException from label2 to label3 with label1;
        catch java.lang.IndexOutOfBoundsException from label2 to label3 with label3;
        catch com.hp.hpl.sparta.DOMException from label4 to label5 with label1;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label3;
        catch com.hp.hpl.sparta.DOMException from label6 to label7 with label1;
        catch java.lang.IndexOutOfBoundsException from label6 to label7 with label3;
        catch com.hp.hpl.sparta.DOMException from label8 to label9 with label1;
        catch java.lang.IndexOutOfBoundsException from label8 to label9 with label3;
        catch com.hp.hpl.sparta.DOMException from label10 to label11 with label1;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label3;
        catch com.hp.hpl.sparta.DOMException from label11 to label12 with label1;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label3;
        catch com.hp.hpl.sparta.DOMException from label13 to label14 with label1;
        catch java.lang.IndexOutOfBoundsException from label13 to label14 with label3;
        catch com.hp.hpl.sparta.DOMException from label15 to label16 with label1;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label3;
        catch com.hp.hpl.sparta.DOMException from label17 to label18 with label1;
        catch java.lang.IndexOutOfBoundsException from label17 to label18 with label3;
        catch com.hp.hpl.sparta.DOMException from label18 to label19 with label1;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label3;
        catch com.hp.hpl.sparta.DOMException from label20 to label21 with label1;
        catch java.lang.IndexOutOfBoundsException from label20 to label21 with label3;
        catch com.hp.hpl.sparta.DOMException from label22 to label23 with label1;
        catch java.lang.IndexOutOfBoundsException from label22 to label23 with label3;
        catch com.hp.hpl.sparta.DOMException from label24 to label25 with label1;
        catch java.lang.IndexOutOfBoundsException from label24 to label25 with label3;
    }
}
