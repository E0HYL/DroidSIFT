class com.hp.hpl.sparta.NodeListWithPosition extends java.lang.Object
{
    private static final java.lang.Integer EIGHT;
    private static final java.lang.Integer FIVE;
    private static final java.lang.Integer FOUR;
    private static final java.lang.Integer NINE;
    private static final java.lang.Integer ONE;
    private static final java.lang.Integer SEVEN;
    private static final java.lang.Integer SIX;
    private static final java.lang.Integer TEN;
    private static final java.lang.Integer THREE;
    private static final java.lang.Integer TWO;
    private java.util.Hashtable positions_;
    private final java.util.Vector vector_;

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = new java.lang.Integer;
        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(1);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer ONE> = $r0;
        $r1 = new java.lang.Integer;
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(2);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TWO> = $r1;
        $r2 = new java.lang.Integer;
        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(3);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer THREE> = $r2;
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(4);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FOUR> = $r3;
        $r4 = new java.lang.Integer;
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(5);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FIVE> = $r4;
        $r5 = new java.lang.Integer;
        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(6);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SIX> = $r5;
        $r6 = new java.lang.Integer;
        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(7);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SEVEN> = $r6;
        $r7 = new java.lang.Integer;
        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(8);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer EIGHT> = $r7;
        $r8 = new java.lang.Integer;
        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(9);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer NINE> = $r8;
        $r9 = new java.lang.Integer;
        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(10);
        <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TEN> = $r9;
        return;
    }

    void <init>()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.util.Vector $r1;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = new java.util.Vector;
        specialinvoke $r1.<java.util.Vector: void <init>()>();
        r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_> = $r1;
        $r2 = new java.util.Hashtable;
        specialinvoke $r2.<java.util.Hashtable: void <init>()>();
        r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_> = $r2;
        return;
    }

    private static java.lang.Integer identity(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.Node r0;
        java.lang.Integer $r1;
        int $i0;

        r0 := @parameter0: com.hp.hpl.sparta.Node;
        $r1 = new java.lang.Integer;
        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);
        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i0);
        return $r1;
    }

    void add(com.hp.hpl.sparta.Node, int)
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        com.hp.hpl.sparta.Node r1;
        int i0;
        java.util.Vector $r2;
        java.lang.Integer $r3, r4, $r6;
        java.util.Hashtable $r5;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;
        r1 := @parameter0: com.hp.hpl.sparta.Node;
        i0 := @parameter1: int;
        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;
        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);
        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            case 7: goto label8;
            case 8: goto label9;
            case 9: goto label10;
            case 10: goto label11;
            default: goto label0;
        };

     label0:
        $r3 = new java.lang.Integer;
        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);
        r4 = $r3;

     label1:
        $r5 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;
        $r6 = staticinvoke <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer identity(com.hp.hpl.sparta.Node)>(r1);
        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r4);
        return;

     label2:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer ONE>;
        goto label1;

     label3:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TWO>;
        goto label1;

     label4:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer THREE>;
        goto label1;

     label5:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FOUR>;
        goto label1;

     label6:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer FIVE>;
        goto label1;

     label7:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SIX>;
        goto label1;

     label8:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer SEVEN>;
        goto label1;

     label9:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer EIGHT>;
        goto label1;

     label10:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer NINE>;
        goto label1;

     label11:
        r4 = <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer TEN>;
        goto label1;
    }

    void add(java.lang.String)
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.lang.String r1;
        java.util.Vector $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;
        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>(r1);
        return;
    }

    java.util.Enumeration iterator()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;
        $r1 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();
        return $r2;
    }

    int position(com.hp.hpl.sparta.Node)
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        com.hp.hpl.sparta.Node r1;
        java.util.Hashtable $r2;
        java.lang.Integer $r3, $r5;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;
        r1 := @parameter0: com.hp.hpl.sparta.Node;
        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;
        $r3 = staticinvoke <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer identity(com.hp.hpl.sparta.Node)>(r1);
        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);
        $r5 = (java.lang.Integer) $r4;
        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();
        return $i0;
    }

    void removeAllElements()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.util.Vector $r1;
        java.util.Hashtable $r2;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;
        $r1 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;
        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();
        $r2 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;
        virtualinvoke $r2.<java.util.Hashtable: void clear()>();
        return;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.sparta.NodeListWithPosition r0;
        java.lang.StringBuffer r1, $r4, $r10, $r11, $r12, $r13, r19, $r20, r21, $r24, $r25;
        java.util.Enumeration r2;
        java.lang.Object r3, $r23;
        java.lang.String r5, $r9, $r14, $r17, $r26;
        java.lang.Integer r6;
        java.util.Vector $r7;
        boolean $z0, $z1;
        java.io.IOException $r16;
        com.hp.hpl.sparta.Node $r18;
        java.util.Hashtable r22;

        r0 := @this: com.hp.hpl.sparta.NodeListWithPosition;

     label0:
        r1 = new java.lang.StringBuffer;
        specialinvoke r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("{ ");
        $r7 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Vector vector_>;
        r2 = virtualinvoke $r7.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 != 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");
        $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r9;

     label2:
        r3 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();
        $z1 = r3 instanceof java.lang.String;
        if $z1 == 0 goto label5;

        $r10 = new java.lang.StringBuffer;
        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();
        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String(");
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);
        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");
        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

     label3:
        goto label1;

     label4:
        $r16 := @caughtexception;
        $r17 = virtualinvoke $r16.<java.lang.Throwable: java.lang.String toString()>();
        return $r17;

     label5:
        $r18 = (com.hp.hpl.sparta.Node) r3;
        $r4 = new java.lang.StringBuffer;
        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();
        r19 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Node(");
        r5 = virtualinvoke $r18.<com.hp.hpl.sparta.Node: java.lang.String toXml()>();
        $r20 = virtualinvoke r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);
        r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")[");
        r22 = r0.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Hashtable positions_>;
        r6 = staticinvoke <com.hp.hpl.sparta.NodeListWithPosition: java.lang.Integer identity(com.hp.hpl.sparta.Node)>($r18);
        $r23 = virtualinvoke r22.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6);
        $r24 = virtualinvoke r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");
        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

     label6:
        goto label1;

        catch java.io.IOException from label0 to label1 with label4;
        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label4;
    }
}
