class com.hp.hpl.sparta.ParseByteStream extends java.lang.Object implements com.hp.hpl.sparta.ParseSource
{
    private com.hp.hpl.sparta.ParseCharStream parseSource_;

    public void <init>(java.lang.String, java.io.InputStream, com.hp.hpl.sparta.ParseLog, java.lang.String, com.hp.hpl.sparta.ParseHandler) throws com.hp.hpl.sparta.ParseException, java.io.IOException
    {
        com.hp.hpl.sparta.ParseByteStream r0;
        java.lang.String r1, r4, r9, $r11, $r20, $r22, r25, $r32, $r34, $r43, $r51;
        java.io.InputStream r2;
        com.hp.hpl.sparta.ParseLog r3, r7;
        com.hp.hpl.sparta.ParseHandler r5;
        byte[] r6;
        int i0, $i1;
        boolean $z0;
        java.lang.Error $r8;
        java.io.InputStreamReader r10, r21, r33;
        com.hp.hpl.sparta.ParseCharStream $r12, $r23, $r35;
        java.io.IOException $r13, r14;
        java.lang.StringBuffer $r15, $r16, $r17, $r18, $r19, $r26, $r27, $r28, $r29, $r30, $r31, $r39, $r40, $r41, $r42, $r47, $r48, $r49, $r50;
        com.hp.hpl.sparta.EncodingMismatchException $r24;
        java.io.UnsupportedEncodingException $r36, r37, $r44, r45;
        com.hp.hpl.sparta.ParseException $r38, $r46;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.io.InputStream;
        r3 := @parameter2: com.hp.hpl.sparta.ParseLog;
        r4 := @parameter3: java.lang.String;
        r5 := @parameter4: com.hp.hpl.sparta.ParseHandler;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r3 != null goto label17;

        r7 = <com.hp.hpl.sparta.ParseSource: com.hp.hpl.sparta.ParseLog DEFAULT_LOG>;

     label0:
        $z0 = virtualinvoke r2.<java.io.InputStream: boolean markSupported()>();
        if $z0 != 0 goto label1;

        $r8 = new java.lang.Error;
        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("Precondition violation: the InputStream passed to ParseByteStream must support mark");
        throw $r8;

     label1:
        $i1 = <com.hp.hpl.sparta.ParseSource: int MAXLOOKAHEAD>;
        virtualinvoke r2.<java.io.InputStream: void mark(int)>($i1);
        r6 = newarray (byte)[4];
        i0 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r6);
        if r4 != null goto label16;

        r9 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String guessEncoding(java.lang.String,byte[],int,com.hp.hpl.sparta.ParseLog)>(r1, r6, i0, r7);

     label2:
        virtualinvoke r2.<java.io.InputStream: void reset()>();
        r10 = new java.io.InputStreamReader;
        $r11 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String fixEncoding(java.lang.String)>(r9);
        specialinvoke r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, $r11);

     label3:
        $r12 = new com.hp.hpl.sparta.ParseCharStream;
        specialinvoke $r12.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>(r1, r10, r7, r9, r5);
        r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_> = $r12;

     label4:
        return;

     label5:
        $r13 := @caughtexception;
        r14 = $r13;

     label6:
        $r15 = new java.lang.StringBuffer;
        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();
        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Problem reading with assumed encoding of ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" so restarting with ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("euc-jp");
        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r7.<com.hp.hpl.sparta.ParseLog: void note(java.lang.String,java.lang.String,int)>($r20, r1, 1);
        virtualinvoke r2.<java.io.InputStream: void reset()>();

     label7:
        r21 = new java.io.InputStreamReader;
        $r22 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String fixEncoding(java.lang.String)>("euc-jp");
        specialinvoke r21.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, $r22);

     label8:
        $r23 = new com.hp.hpl.sparta.ParseCharStream;
        specialinvoke $r23.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>(r1, r21, r7, null, r5);
        r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_> = $r23;

     label9:
        return;

     label10:
        $r24 := @caughtexception;
        r25 = virtualinvoke $r24.<com.hp.hpl.sparta.EncodingMismatchException: java.lang.String getDeclaredEncoding()>();
        $r26 = new java.lang.StringBuffer;
        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();
        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Encoding declaration of ");
        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);
        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is different that assumed ");
        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);
        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" so restarting the parsing with the new encoding");
        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r7.<com.hp.hpl.sparta.ParseLog: void note(java.lang.String,java.lang.String,int)>($r32, r1, 1);
        virtualinvoke r2.<java.io.InputStream: void reset()>();

     label11:
        r33 = new java.io.InputStreamReader;
        $r34 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String fixEncoding(java.lang.String)>(r25);
        specialinvoke r33.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r2, $r34);

     label12:
        $r35 = new com.hp.hpl.sparta.ParseCharStream;
        specialinvoke $r35.<com.hp.hpl.sparta.ParseCharStream: void <init>(java.lang.String,java.io.Reader,com.hp.hpl.sparta.ParseLog,java.lang.String,com.hp.hpl.sparta.ParseHandler)>(r1, r33, r7, null, r5);
        r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_> = $r35;
        return;

     label13:
        $r36 := @caughtexception;
        r37 = $r36;

     label14:
        $r38 = new com.hp.hpl.sparta.ParseException;
        $r39 = new java.lang.StringBuffer;
        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();
        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");
        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("euc-jp");
        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not a supported encoding");
        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r38.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseLog,java.lang.String,int,int,java.lang.String,java.lang.String)>(r7, r1, 1, 0, "euc-jp", $r43);
        throw $r38;

     label15:
        $r44 := @caughtexception;
        r45 = $r44;
        $r46 = new com.hp.hpl.sparta.ParseException;
        $r47 = new java.lang.StringBuffer;
        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();
        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");
        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);
        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" is not a supported encoding");
        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>();
        specialinvoke $r46.<com.hp.hpl.sparta.ParseException: void <init>(com.hp.hpl.sparta.ParseLog,java.lang.String,int,int,java.lang.String,java.lang.String)>(r7, r1, 1, 0, r25, $r51);
        throw $r46;

     label16:
        r9 = r4;
        goto label2;

     label17:
        r7 = r3;
        goto label0;

        catch com.hp.hpl.sparta.EncodingMismatchException from label2 to label3 with label10;
        catch java.io.IOException from label3 to label4 with label5;
        catch com.hp.hpl.sparta.EncodingMismatchException from label3 to label4 with label10;
        catch com.hp.hpl.sparta.EncodingMismatchException from label6 to label7 with label10;
        catch java.io.UnsupportedEncodingException from label7 to label8 with label13;
        catch com.hp.hpl.sparta.EncodingMismatchException from label7 to label8 with label10;
        catch com.hp.hpl.sparta.EncodingMismatchException from label8 to label9 with label10;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label15;
        catch com.hp.hpl.sparta.EncodingMismatchException from label14 to label15 with label10;
    }

    private static boolean equals(byte[], int)
    {
        byte[] r0;
        int i0, $i2, $i5, $i6, $i9, $i10, $i13;
        byte $b1, $b3, $b4, $b7, $b8, $b11, $b12, $b14;

        r0 := @parameter0: byte[];
        i0 := @parameter1: int;
        $b1 = r0[0];
        $i2 = i0 >>> 24;
        $b3 = (byte) $i2;
        if $b1 != $b3 goto label0;

        $b4 = r0[1];
        $i5 = i0 >>> 16;
        $i6 = 255 & $i5;
        $b7 = (byte) $i6;
        if $b4 != $b7 goto label0;

        $b8 = r0[2];
        $i9 = i0 >>> 8;
        $i10 = 255 & $i9;
        $b11 = (byte) $i10;
        if $b8 != $b11 goto label0;

        $b12 = r0[3];
        $i13 = i0 & 255;
        $b14 = (byte) $i13;
        if $b12 != $b14 goto label0;

        return 1;

     label0:
        return 0;
    }

    private static boolean equals(byte[], short)
    {
        byte[] r0;
        short s0, $s2, $s5;
        byte $b1, $b3, $b4, $b6;

        r0 := @parameter0: byte[];
        s0 := @parameter1: short;
        $b1 = r0[0];
        $s2 = s0 >>> 8;
        $b3 = (byte) $s2;
        if $b1 != $b3 goto label0;

        $b4 = r0[1];
        $s5 = s0 & 255;
        $b6 = (byte) $s5;
        if $b4 != $b6 goto label0;

        return 1;

     label0:
        return 0;
    }

    private static java.lang.String fixEncoding(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("utf8");
        if $z0 == 0 goto label0;

        return "UTF-8";

     label0:
        return r0;
    }

    private static java.lang.String guessEncoding(java.lang.String, byte[], int, com.hp.hpl.sparta.ParseLog) throws java.io.IOException
    {
        java.lang.String r0, r3, r4, $r7, $r10, $r13, $r16, $r20, $r23;
        byte[] r1;
        int i0;
        com.hp.hpl.sparta.ParseLog r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r24, $r25;
        byte $b1, $b2, $b3, $b4;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: byte[];
        i0 := @parameter2: int;
        r2 := @parameter3: com.hp.hpl.sparta.ParseLog;
        if i0 == 4 goto label4;

        if i0 > 0 goto label3;

        r3 = "no characters in input";

     label0:
        interfaceinvoke r2.<com.hp.hpl.sparta.ParseLog: void error(java.lang.String,java.lang.String,int)>(r3, r0, 1);
        r4 = "UTF-8";

     label1:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");
        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuffer;
        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();
        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("From start ");
        $b1 = r1[0];
        $r7 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b1);
        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $b2 = r1[1];
        $r10 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b2);
        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $b3 = r1[2];
        $r13 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b3);
        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);
        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");
        $b4 = r1[3];
        $r16 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: java.lang.String hex(byte)>($b4);
        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);
        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" deduced encoding = ");
        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);
        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();
        interfaceinvoke r2.<com.hp.hpl.sparta.ParseLog: void note(java.lang.String,java.lang.String,int)>($r20, r0, 1);

     label2:
        return r4;

     label3:
        $r21 = new java.lang.StringBuffer;
        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();
        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("less than 4 characters in input: \"");
        $r23 = new java.lang.String;
        specialinvoke $r23.<java.lang.String: void <init>(byte[],int,int)>(r1, 0, i0);
        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");
        r3 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();
        goto label0;

     label4:
        $z1 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 65279);
        if $z1 != 0 goto label5;

        $z2 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, -131072);
        if $z2 != 0 goto label5;

        $z3 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 65534);
        if $z3 != 0 goto label5;

        $z4 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, -16842752);
        if $z4 != 0 goto label5;

        $z5 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 60);
        if $z5 != 0 goto label5;

        $z6 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 1006632960);
        if $z6 != 0 goto label5;

        $z7 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 15360);
        if $z7 != 0 goto label5;

        $z8 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 3932160);
        if $z8 == 0 goto label6;

     label5:
        r4 = "UCS-4";
        goto label1;

     label6:
        $z9 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 3932223);
        if $z9 == 0 goto label7;

        r4 = "UTF-16BE";
        goto label1;

     label7:
        $z10 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 1006649088);
        if $z10 == 0 goto label8;

        r4 = "UTF-16LE";
        goto label1;

     label8:
        $z11 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 1010792557);
        if $z11 == 0 goto label9;

        r4 = "UTF-8";
        goto label1;

     label9:
        $z12 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],int)>(r1, 1282385812);
        if $z12 == 0 goto label10;

        r4 = "EBCDIC";
        goto label1;

     label10:
        $z13 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],short)>(r1, -2);
        if $z13 != 0 goto label11;

        $z14 = staticinvoke <com.hp.hpl.sparta.ParseByteStream: boolean equals(byte[],short)>(r1, -257);
        if $z14 == 0 goto label12;

     label11:
        r4 = "UTF-16";
        goto label1;

     label12:
        r4 = "UTF-8";
        goto label1;
    }

    private static java.lang.String hex(byte)
    {
        byte b0;
        java.lang.String r0, $r4;
        int $i1, $i2, $i3;
        java.lang.StringBuffer $r1, $r2, $r3;

        b0 := @parameter0: byte;
        r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(b0);
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();
        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label0;
        };

     label0:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();
        $i3 = $i2 - 2;
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

     label1:
        return r0;

     label2:
        $r1 = new java.lang.StringBuffer;
        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");
        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r4;
    }

    public int getLineNumber()
    {
        com.hp.hpl.sparta.ParseByteStream r0;
        com.hp.hpl.sparta.ParseCharStream $r1;
        int $i0;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;
        $r1 = r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_>;
        $i0 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: int getLineNumber()>();
        return $i0;
    }

    public java.lang.String getSystemId()
    {
        com.hp.hpl.sparta.ParseByteStream r0;
        com.hp.hpl.sparta.ParseCharStream $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;
        $r1 = r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_>;
        $r2 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: java.lang.String getSystemId()>();
        return $r2;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.sparta.ParseByteStream r0;
        com.hp.hpl.sparta.ParseCharStream $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.sparta.ParseByteStream;
        $r1 = r0.<com.hp.hpl.sparta.ParseByteStream: com.hp.hpl.sparta.ParseCharStream parseSource_>;
        $r2 = virtualinvoke $r1.<com.hp.hpl.sparta.ParseCharStream: java.lang.String toString()>();
        return $r2;
    }
}
