class com.hp.hpl.sparta.XPathVisitor extends java.lang.Object implements com.hp.hpl.sparta.xpath.Visitor
{
    private static final java.lang.Boolean FALSE;
    private static final java.lang.Boolean TRUE;
    private com.hp.hpl.sparta.Node contextNode_;
    private final com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_;
    private boolean multiLevel_;
    private java.lang.Object node_;
    private java.util.Vector nodelistFiltered_;
    private final com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_;
    private java.util.Enumeration nodesetIterator_;
    private com.hp.hpl.sparta.xpath.XPath xpath_;

    static void <clinit>()
    {
        java.lang.Boolean $r0, $r1;

        $r0 = new java.lang.Boolean;
        specialinvoke $r0.<java.lang.Boolean: void <init>(boolean)>(1);
        <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE> = $r0;
        $r1 = new java.lang.Boolean;
        specialinvoke $r1.<java.lang.Boolean: void <init>(boolean)>(0);
        <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE> = $r1;
        return;
    }

    public void <init>(com.hp.hpl.sparta.Document, com.hp.hpl.sparta.xpath.XPath) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Document r1;
        com.hp.hpl.sparta.xpath.XPath r2;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.Document;
        r2 := @parameter1: com.hp.hpl.sparta.xpath.XPath;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void <init>(com.hp.hpl.sparta.xpath.XPath,com.hp.hpl.sparta.Node)>(r2, r1);
        return;
    }

    public void <init>(com.hp.hpl.sparta.Element, com.hp.hpl.sparta.xpath.XPath) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Element r1;
        com.hp.hpl.sparta.xpath.XPath r2;
        boolean $z0;
        com.hp.hpl.sparta.xpath.XPathException $r3;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        r2 := @parameter1: com.hp.hpl.sparta.xpath.XPath;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void <init>(com.hp.hpl.sparta.xpath.XPath,com.hp.hpl.sparta.Node)>(r2, r1);
        $z0 = virtualinvoke r2.<com.hp.hpl.sparta.xpath.XPath: boolean isAbsolute()>();
        if $z0 == 0 goto label0;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;
        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>(r2, "Cannot use element as context node for absolute xpath");
        throw $r3;

     label0:
        return;
    }

    private void <init>(com.hp.hpl.sparta.xpath.XPath, com.hp.hpl.sparta.Node) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.XPath r1;
        com.hp.hpl.sparta.Node r2, $r8;
        com.hp.hpl.sparta.NodeListWithPosition $r3, $r13;
        java.util.Vector $r4, $r6, $r7, $r15, $r22;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r5, $r20;
        java.util.Enumeration r9, $r14, $r17, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r10, $r19, $r23;
        com.hp.hpl.sparta.xpath.Step r11;
        com.hp.hpl.sparta.xpath.NodeTest $r12;
        com.hp.hpl.sparta.xpath.BooleanExpr r16;
        java.lang.Boolean $r21;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.XPath;
        r2 := @parameter1: com.hp.hpl.sparta.Node;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r3 = new com.hp.hpl.sparta.NodeListWithPosition;
        specialinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void <init>()>();
        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_> = $r3;
        $r4 = new java.util.Vector;
        specialinvoke $r4.<java.util.Vector: void <init>()>();
        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_> = $r4;
        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_> = null;
        r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_> = null;
        $r5 = new com.hp.hpl.sparta.XPathVisitor$BooleanStack;
        specialinvoke $r5.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void <init>(com.hp.hpl.sparta.XPathVisitor$1)>(null);
        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_> = $r5;
        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_> = r1;
        r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_> = r2;
        $r6 = new java.util.Vector;
        specialinvoke $r6.<java.util.Vector: void <init>(int)>(1);
        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_> = $r6;
        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_>;
        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>($r8);
        r9 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.XPath: java.util.Enumeration getSteps()>();

     label0:
        $z0 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 != 0 goto label1;

        return;

     label1:
        $r10 = interfaceinvoke r9.<java.util.Enumeration: java.lang.Object nextElement()>();
        r11 = (com.hp.hpl.sparta.xpath.Step) $r10;
        $z1 = virtualinvoke r11.<com.hp.hpl.sparta.xpath.Step: boolean isMultiLevel()>();
        r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_> = $z1;
        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_> = null;
        $r12 = virtualinvoke r11.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.NodeTest getNodeTest()>();
        virtualinvoke $r12.<com.hp.hpl.sparta.xpath.NodeTest: void accept(com.hp.hpl.sparta.xpath.Visitor)>(r0);
        $r13 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        $r14 = virtualinvoke $r13.<com.hp.hpl.sparta.NodeListWithPosition: java.util.Enumeration iterator()>();
        r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_> = $r14;
        $r15 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        virtualinvoke $r15.<java.util.Vector: void removeAllElements()>();
        r16 = virtualinvoke r11.<com.hp.hpl.sparta.xpath.Step: com.hp.hpl.sparta.xpath.BooleanExpr getPredicate()>();

     label2:
        $r17 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_>;
        $z2 = interfaceinvoke $r17.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z2 == 0 goto label0;

        $r18 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Enumeration nodesetIterator_>;
        $r19 = interfaceinvoke $r18.<java.util.Enumeration: java.lang.Object nextElement()>();
        r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_> = $r19;
        virtualinvoke r16.<com.hp.hpl.sparta.xpath.BooleanExpr: void accept(com.hp.hpl.sparta.xpath.BooleanExprVisitor)>(r0);
        $r20 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r21 = virtualinvoke $r20.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: java.lang.Boolean pop()>();
        $z3 = virtualinvoke $r21.<java.lang.Boolean: boolean booleanValue()>();
        if $z3 == 0 goto label2;

        $r22 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r23 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        virtualinvoke $r22.<java.util.Vector: void addElement(java.lang.Object)>($r23);
        goto label2;
    }

    private void accumulateElements(com.hp.hpl.sparta.Document)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Document r1;
        com.hp.hpl.sparta.Element r2;
        com.hp.hpl.sparta.NodeListWithPosition $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.Document;
        r2 = virtualinvoke r1.<com.hp.hpl.sparta.Document: com.hp.hpl.sparta.Element getDocumentElement()>();
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>(r2, 1);
        $z0 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Element)>(r2);

     label0:
        return;
    }

    private void accumulateElements(com.hp.hpl.sparta.Element)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Element r1, $r4;
        int i0, i1;
        com.hp.hpl.sparta.Node r2;
        boolean $z0, $z1;
        com.hp.hpl.sparta.NodeListWithPosition $r3;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        i0 = 0;
        r2 = virtualinvoke r1.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label0:
        if r2 != null goto label1;

        return;

     label1:
        $z0 = r2 instanceof com.hp.hpl.sparta.Element;
        if $z0 == 0 goto label3;

        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        i1 = i0 + 1;
        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>(r2, i1);
        $z1 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;
        if $z1 == 0 goto label2;

        $r4 = (com.hp.hpl.sparta.Element) r2;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Element)>($r4);

     label2:
        i0 = i1;

     label3:
        r2 = virtualinvoke r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();
        goto label0;
    }

    private void accumulateMatchingElements(com.hp.hpl.sparta.Document, java.lang.String)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Document r1;
        java.lang.String r2, $r4;
        com.hp.hpl.sparta.Element r3;
        com.hp.hpl.sparta.NodeListWithPosition $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.Document;
        r2 := @parameter1: java.lang.String;
        r3 = virtualinvoke r1.<com.hp.hpl.sparta.Document: com.hp.hpl.sparta.Element getDocumentElement()>();
        if r3 != null goto label1;

     label0:
        return;

     label1:
        $r4 = virtualinvoke r3.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();
        if $r4 != r2 goto label2;

        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r5.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>(r3, 1);

     label2:
        $z0 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;
        if $z0 == 0 goto label0;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Element,java.lang.String)>(r3, r2);
        return;
    }

    private void accumulateMatchingElements(com.hp.hpl.sparta.Element, java.lang.String)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.Element r1, r3;
        java.lang.String r2, $r5;
        int i0;
        com.hp.hpl.sparta.Node r4;
        boolean $z0, $z1;
        com.hp.hpl.sparta.NodeListWithPosition $r6;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.Element;
        r2 := @parameter1: java.lang.String;
        r4 = virtualinvoke r1.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();
        i0 = 0;

     label0:
        if r4 != null goto label1;

        return;

     label1:
        $z0 = r4 instanceof com.hp.hpl.sparta.Element;
        if $z0 == 0 goto label3;

        r3 = (com.hp.hpl.sparta.Element) r4;
        $r5 = virtualinvoke r3.<com.hp.hpl.sparta.Element: java.lang.String getTagName()>();
        if $r5 != r2 goto label2;

        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        i0 = i0 + 1;
        virtualinvoke $r6.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>(r3, i0);

     label2:
        $z1 = r0.<com.hp.hpl.sparta.XPathVisitor: boolean multiLevel_>;
        if $z1 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Element,java.lang.String)>(r3, r2);

     label3:
        r4 = virtualinvoke r4.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();
        goto label0;
    }

    public com.hp.hpl.sparta.Element getFirstResultElement()
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        java.util.Vector $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        com.hp.hpl.sparta.Element $r4;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();
        if $i0 != 0 goto label0;

        return null;

     label0:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(0);
        $r4 = (com.hp.hpl.sparta.Element) $r3;
        return $r4;
    }

    public java.lang.String getFirstResultString()
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        java.util.Vector $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();
        if $i0 != 0 goto label0;

        return null;

     label0:
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>(0);
        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();
        return $r4;
    }

    public java.util.Enumeration getResultEnumeration()
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        java.util.Vector $r1;
        java.util.Enumeration $r2;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        $r1 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();
        return $r2;
    }

    public void visit(com.hp.hpl.sparta.xpath.AllElementTest)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AllElementTest r1;
        java.lang.Object r2;
        java.util.Vector $r3;
        com.hp.hpl.sparta.NodeListWithPosition $r4;
        java.util.Enumeration r5;
        boolean $z0, $z1, $z2;
        com.hp.hpl.sparta.Element $r6;
        com.hp.hpl.sparta.Document $r7;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AllElementTest;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r4.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();
        r5 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

     label0:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();
        $z1 = r2 instanceof com.hp.hpl.sparta.Element;
        if $z1 == 0 goto label2;

        $r6 = (com.hp.hpl.sparta.Element) r2;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Element)>($r6);
        goto label0;

     label2:
        $z2 = r2 instanceof com.hp.hpl.sparta.Document;
        if $z2 == 0 goto label0;

        $r7 = (com.hp.hpl.sparta.Document) r2;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateElements(com.hp.hpl.sparta.Document)>($r7);
        goto label0;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrEqualsExpr r1;
        java.lang.String r2, $r8, $r9;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1;
        com.hp.hpl.sparta.xpath.XPathException $r4;
        com.hp.hpl.sparta.xpath.XPath $r5;
        com.hp.hpl.sparta.Element $r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack r10;
        java.lang.Boolean r11;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrEqualsExpr;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r3 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r4 = new com.hp.hpl.sparta.xpath.XPathException;
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r4.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r5, "Cannot test attribute of document");
        throw $r4;

     label0:
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r7 = (com.hp.hpl.sparta.Element) $r6;
        $r8 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();
        r2 = virtualinvoke $r7.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r8);
        $r9 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrCompareExpr: java.lang.String getAttrValue()>();
        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        r10 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        if $z1 == 0 goto label2;

        r11 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label1:
        virtualinvoke r10.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>(r11);
        return;

     label2:
        r11 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        goto label1;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrExistsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrExistsExpr r1;
        java.lang.Object $r2, $r5;
        boolean $z0, z1;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.xpath.XPath $r4;
        com.hp.hpl.sparta.Element $r6;
        java.lang.String $r7, r8;
        int $i0;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack r9;
        java.lang.Boolean r10;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrExistsExpr;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");
        throw $r3;

     label0:
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r6 = (com.hp.hpl.sparta.Element) $r5;
        $r7 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();
        r8 = virtualinvoke $r6.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r7);
        if r8 == null goto label3;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();
        if $i0 <= 0 goto label3;

        z1 = 1;

     label1:
        r9 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        if z1 == 0 goto label4;

        r10 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label2:
        virtualinvoke r9.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>(r10);
        return;

     label3:
        z1 = 0;
        goto label1;

     label4:
        r10 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrGreaterExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrGreaterExpr r1;
        java.lang.Object $r2, $r5;
        boolean $z0, z1;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.xpath.XPath $r4;
        com.hp.hpl.sparta.Element $r6;
        java.lang.String $r7, $r8;
        long $l0;
        double $d0, $d1;
        byte $b1;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack r9;
        java.lang.Boolean r10;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrGreaterExpr;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");
        throw $r3;

     label0:
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r6 = (com.hp.hpl.sparta.Element) $r5;
        $r7 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();
        $r8 = virtualinvoke $r6.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r7);
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);
        $d0 = (double) $l0;
        $d1 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrRelationalExpr: double getAttrValue()>();
        $b1 = $d0 cmpl $d1;
        if $b1 <= 0 goto label3;

        z1 = 1;

     label1:
        r9 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        if z1 == 0 goto label4;

        r10 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label2:
        virtualinvoke r9.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>(r10);
        return;

     label3:
        z1 = 0;
        goto label1;

     label4:
        r10 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrLessExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrLessExpr r1;
        java.lang.Object $r2, $r5;
        boolean $z0, z1;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.xpath.XPath $r4;
        com.hp.hpl.sparta.Element $r6;
        java.lang.String $r7, $r8;
        long $l0;
        double $d0, $d1;
        byte $b1;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack r9;
        java.lang.Boolean r10;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrLessExpr;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");
        throw $r3;

     label0:
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r6 = (com.hp.hpl.sparta.Element) $r5;
        $r7 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();
        $r8 = virtualinvoke $r6.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r7);
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);
        $d0 = (double) $l0;
        $d1 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrRelationalExpr: double getAttrValue()>();
        $b1 = $d0 cmpg $d1;
        if $b1 >= 0 goto label3;

        z1 = 1;

     label1:
        r9 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        if z1 == 0 goto label4;

        r10 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label2:
        virtualinvoke r9.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>(r10);
        return;

     label3:
        z1 = 0;
        goto label1;

     label4:
        r10 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrNotEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrNotEqualsExpr r1;
        java.lang.String r2, $r8, $r9;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1, z2;
        com.hp.hpl.sparta.xpath.XPathException $r4;
        com.hp.hpl.sparta.xpath.XPath $r5;
        com.hp.hpl.sparta.Element $r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack r10;
        java.lang.Boolean r11;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrNotEqualsExpr;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r3 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r4 = new com.hp.hpl.sparta.xpath.XPathException;
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r4.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r5, "Cannot test attribute of document");
        throw $r4;

     label0:
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r7 = (com.hp.hpl.sparta.Element) $r6;
        $r8 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrExpr: java.lang.String getAttrName()>();
        r2 = virtualinvoke $r7.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r8);
        $r9 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrCompareExpr: java.lang.String getAttrValue()>();
        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z1 != 0 goto label3;

        z2 = 1;

     label1:
        r10 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        if z2 == 0 goto label4;

        r11 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label2:
        virtualinvoke r10.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>(r11);
        return;

     label3:
        z2 = 0;
        goto label1;

     label4:
        r11 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.AttrTest)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.AttrTest r1;
        java.util.Enumeration r2;
        com.hp.hpl.sparta.Node r3;
        java.util.Vector $r4;
        com.hp.hpl.sparta.NodeListWithPosition $r5, $r10;
        boolean $z0, $z1;
        java.lang.Object $r6;
        com.hp.hpl.sparta.Element $r7;
        java.lang.String $r8, r9;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.AttrTest;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r5.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();
        r2 = virtualinvoke $r4.<java.util.Vector: java.util.Enumeration elements()>();

     label0:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();
        r3 = (com.hp.hpl.sparta.Node) $r6;
        $z1 = r3 instanceof com.hp.hpl.sparta.Element;
        if $z1 == 0 goto label0;

        $r7 = (com.hp.hpl.sparta.Element) r3;
        $r8 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.AttrTest: java.lang.String getAttrName()>();
        r9 = virtualinvoke $r7.<com.hp.hpl.sparta.Element: java.lang.String getAttribute(java.lang.String)>($r8);
        if r9 == null goto label0;

        $r10 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r10.<com.hp.hpl.sparta.NodeListWithPosition: void add(java.lang.String)>(r9);
        goto label0;
    }

    public void visit(com.hp.hpl.sparta.xpath.ElementTest)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.ElementTest r1;
        java.util.Vector r2;
        int i0, i1;
        java.lang.Object r3;
        java.lang.String r4;
        com.hp.hpl.sparta.NodeListWithPosition $r5;
        boolean $z0, $z1;
        com.hp.hpl.sparta.Element $r6;
        com.hp.hpl.sparta.Document $r7;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.ElementTest;
        r4 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.ElementTest: java.lang.String getTagName()>();
        r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        i0 = virtualinvoke r2.<java.util.Vector: int size()>();
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r5.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();
        i1 = 0;

     label0:
        if i1 < i0 goto label1;

        return;

     label1:
        r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i1);
        $z0 = r3 instanceof com.hp.hpl.sparta.Element;
        if $z0 == 0 goto label3;

        $r6 = (com.hp.hpl.sparta.Element) r3;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Element,java.lang.String)>($r6, r4);

     label2:
        i1 = i1 + 1;
        goto label0;

     label3:
        $z1 = r3 instanceof com.hp.hpl.sparta.Document;
        if $z1 == 0 goto label2;

        $r7 = (com.hp.hpl.sparta.Document) r3;
        specialinvoke r0.<com.hp.hpl.sparta.XPathVisitor: void accumulateMatchingElements(com.hp.hpl.sparta.Document,java.lang.String)>($r7, r4);
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.ParentNodeTest) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.ParentNodeTest r1;
        com.hp.hpl.sparta.NodeListWithPosition $r2, $r7;
        com.hp.hpl.sparta.Node $r3;
        com.hp.hpl.sparta.Element r4;
        com.hp.hpl.sparta.xpath.XPathException $r5;
        com.hp.hpl.sparta.xpath.XPath $r6;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.ParentNodeTest;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r2.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_>;
        r4 = virtualinvoke $r3.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Element getParentNode()>();
        if r4 != null goto label0;

        $r5 = new com.hp.hpl.sparta.xpath.XPathException;
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r5.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r6, "Illegal attempt to apply \"..\" to node with no parent.");
        throw $r5;

     label0:
        $r7 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r7.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>(r4, 1);
        return;
    }

    public void visit(com.hp.hpl.sparta.xpath.PositionEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.PositionEqualsExpr r1;
        java.lang.Object $r2, $r6;
        boolean $z0, z1;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.xpath.XPath $r4;
        com.hp.hpl.sparta.NodeListWithPosition $r5;
        com.hp.hpl.sparta.Element $r7;
        int $i0, $i1;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack r8;
        java.lang.Boolean r9;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.PositionEqualsExpr;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test position of document");
        throw $r3;

     label0:
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r7 = (com.hp.hpl.sparta.Element) $r6;
        $i0 = virtualinvoke $r5.<com.hp.hpl.sparta.NodeListWithPosition: int position(com.hp.hpl.sparta.Node)>($r7);
        $i1 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.PositionEqualsExpr: int getPosition()>();
        if $i0 != $i1 goto label3;

        z1 = 1;

     label1:
        r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        if z1 == 0 goto label4;

        r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;

     label2:
        virtualinvoke r8.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>(r9);
        return;

     label3:
        z1 = 0;
        goto label1;

     label4:
        r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.TextEqualsExpr r1;
        com.hp.hpl.sparta.Node r2;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1, $z2;
        com.hp.hpl.sparta.xpath.XPathException $r4;
        com.hp.hpl.sparta.xpath.XPath $r5;
        com.hp.hpl.sparta.Element $r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r8, $r13;
        java.lang.Boolean $r9, $r14;
        com.hp.hpl.sparta.Text $r10;
        java.lang.String $r11, $r12;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.TextEqualsExpr;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r3 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r4 = new com.hp.hpl.sparta.xpath.XPathException;
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r4.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r5, "Cannot test attribute of document");
        throw $r4;

     label0:
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r7 = (com.hp.hpl.sparta.Element) $r6;
        r2 = virtualinvoke $r7.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label1:
        if r2 != null goto label2;

        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        virtualinvoke $r8.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r9);
        return;

     label2:
        $z1 = r2 instanceof com.hp.hpl.sparta.Text;
        if $z1 == 0 goto label3;

        $r10 = (com.hp.hpl.sparta.Text) r2;
        $r11 = virtualinvoke $r10.<com.hp.hpl.sparta.Text: java.lang.String getData()>();
        $r12 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.TextCompareExpr: java.lang.String getValue()>();
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);
        if $z2 == 0 goto label3;

        $r13 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r14 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;
        virtualinvoke $r13.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r14);
        return;

     label3:
        r2 = virtualinvoke r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();
        goto label1;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextExistsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.TextExistsExpr r1;
        java.lang.Object $r2, $r5;
        boolean $z0, $z1;
        com.hp.hpl.sparta.xpath.XPathException $r3;
        com.hp.hpl.sparta.xpath.XPath $r4;
        com.hp.hpl.sparta.Element $r6;
        com.hp.hpl.sparta.Node r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r8, $r10;
        java.lang.Boolean $r9, $r11;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.TextExistsExpr;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r2 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r3 = new com.hp.hpl.sparta.xpath.XPathException;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r3.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r4, "Cannot test attribute of document");
        throw $r3;

     label0:
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r6 = (com.hp.hpl.sparta.Element) $r5;
        r7 = virtualinvoke $r6.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label1:
        if r7 != null goto label2;

        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        virtualinvoke $r8.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r9);
        return;

     label2:
        $z1 = r7 instanceof com.hp.hpl.sparta.Text;
        if $z1 == 0 goto label3;

        $r10 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r11 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;
        virtualinvoke $r10.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r11);
        return;

     label3:
        r7 = virtualinvoke r7.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();
        goto label1;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextNotEqualsExpr) throws com.hp.hpl.sparta.xpath.XPathException
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.TextNotEqualsExpr r1;
        com.hp.hpl.sparta.Node r2;
        java.lang.Object $r3, $r6;
        boolean $z0, $z1, $z2;
        com.hp.hpl.sparta.xpath.XPathException $r4;
        com.hp.hpl.sparta.xpath.XPath $r5;
        com.hp.hpl.sparta.Element $r7;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r8, $r13;
        java.lang.Boolean $r9, $r14;
        com.hp.hpl.sparta.Text $r10;
        java.lang.String $r11, $r12;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.TextNotEqualsExpr;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $z0 = $r3 instanceof com.hp.hpl.sparta.Element;
        if $z0 != 0 goto label0;

        $r4 = new com.hp.hpl.sparta.xpath.XPathException;
        $r5 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.xpath.XPath xpath_>;
        specialinvoke $r4.<com.hp.hpl.sparta.xpath.XPathException: void <init>(com.hp.hpl.sparta.xpath.XPath,java.lang.String)>($r5, "Cannot test attribute of document");
        throw $r4;

     label0:
        $r6 = r0.<com.hp.hpl.sparta.XPathVisitor: java.lang.Object node_>;
        $r7 = (com.hp.hpl.sparta.Element) $r6;
        r2 = virtualinvoke $r7.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label1:
        if r2 != null goto label2;

        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r9 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean FALSE>;
        virtualinvoke $r8.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r9);
        return;

     label2:
        $z1 = r2 instanceof com.hp.hpl.sparta.Text;
        if $z1 == 0 goto label3;

        $r10 = (com.hp.hpl.sparta.Text) r2;
        $r11 = virtualinvoke $r10.<com.hp.hpl.sparta.Text: java.lang.String getData()>();
        $r12 = virtualinvoke r1.<com.hp.hpl.sparta.xpath.TextCompareExpr: java.lang.String getValue()>();
        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);
        if $z2 != 0 goto label3;

        $r13 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r14 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;
        virtualinvoke $r13.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r14);
        return;

     label3:
        r2 = virtualinvoke r2.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();
        goto label1;
    }

    public void visit(com.hp.hpl.sparta.xpath.TextTest)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.TextTest r1;
        java.lang.Object r2;
        java.util.Vector $r3;
        com.hp.hpl.sparta.NodeListWithPosition $r4, $r8;
        java.util.Enumeration r5;
        boolean $z0, $z1, $z2;
        com.hp.hpl.sparta.Element $r6;
        com.hp.hpl.sparta.Node r7;
        com.hp.hpl.sparta.Text $r9;
        java.lang.String $r10;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.TextTest;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: java.util.Vector nodelistFiltered_>;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r4.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();
        r5 = virtualinvoke $r3.<java.util.Vector: java.util.Enumeration elements()>();

     label0:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();
        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();
        $z1 = r2 instanceof com.hp.hpl.sparta.Element;
        if $z1 == 0 goto label0;

        $r6 = (com.hp.hpl.sparta.Element) r2;
        r7 = virtualinvoke $r6.<com.hp.hpl.sparta.Element: com.hp.hpl.sparta.Node getFirstChild()>();

     label2:
        if r7 == null goto label0;

        $z2 = r7 instanceof com.hp.hpl.sparta.Text;
        if $z2 == 0 goto label3;

        $r8 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        $r9 = (com.hp.hpl.sparta.Text) r7;
        $r10 = virtualinvoke $r9.<com.hp.hpl.sparta.Text: java.lang.String getData()>();
        virtualinvoke $r8.<com.hp.hpl.sparta.NodeListWithPosition: void add(java.lang.String)>($r10);

     label3:
        r7 = virtualinvoke r7.<com.hp.hpl.sparta.Node: com.hp.hpl.sparta.Node getNextSibling()>();
        goto label2;
    }

    public void visit(com.hp.hpl.sparta.xpath.ThisNodeTest)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.ThisNodeTest r1;
        com.hp.hpl.sparta.NodeListWithPosition $r2, $r3;
        com.hp.hpl.sparta.Node $r4;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.ThisNodeTest;
        $r2 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        virtualinvoke $r2.<com.hp.hpl.sparta.NodeListWithPosition: void removeAllElements()>();
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.NodeListWithPosition nodelistRaw_>;
        $r4 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.Node contextNode_>;
        virtualinvoke $r3.<com.hp.hpl.sparta.NodeListWithPosition: void add(com.hp.hpl.sparta.Node,int)>($r4, 1);
        return;
    }

    public void visit(com.hp.hpl.sparta.xpath.TrueExpr)
    {
        com.hp.hpl.sparta.XPathVisitor r0;
        com.hp.hpl.sparta.xpath.TrueExpr r1;
        java.lang.Boolean $r2;
        com.hp.hpl.sparta.XPathVisitor$BooleanStack $r3;

        r0 := @this: com.hp.hpl.sparta.XPathVisitor;
        r1 := @parameter0: com.hp.hpl.sparta.xpath.TrueExpr;
        $r3 = r0.<com.hp.hpl.sparta.XPathVisitor: com.hp.hpl.sparta.XPathVisitor$BooleanStack exprStack_>;
        $r2 = <com.hp.hpl.sparta.XPathVisitor: java.lang.Boolean TRUE>;
        virtualinvoke $r3.<com.hp.hpl.sparta.XPathVisitor$BooleanStack: void push(java.lang.Boolean)>($r2);
        return;
    }
}
