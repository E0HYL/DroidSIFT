public class com.xxx.yyy.ZipIntMultShortHashMap extends java.lang.Object
{
    public static final int DEFAULT_LOAD_FACTOR;
    public static final int SUB_ELEMENT_SIZE;
    private com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets;
    private final boolean isPowerOfTwo;
    private final int loadFactor;
    private int size;

    public void <init>(int)
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 := @parameter0: int;
        specialinvoke r0.<com.xxx.yyy.ZipIntMultShortHashMap: void <init>(int,int)>(i0, 75);
        return;
    }

    public void <init>(int, int)
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0, i1, i2, $i3, i4;
        boolean z0;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] $r1;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 := @parameter0: int;
        i1 := @parameter1: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $i3 = i0 * 100;
        i4 = $i3 / i1;
        i2 = 1;

     label0:
        if i4 > i2 goto label2;

        if i2 != i4 goto label3;

        z0 = 1;

     label1:
        r0.<com.xxx.yyy.ZipIntMultShortHashMap: boolean isPowerOfTwo> = z0;
        $r1 = newarray (com.xxx.yyy.ZipIntMultShortHashMap$Element)[i4];
        r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets> = $r1;
        r0.<com.xxx.yyy.ZipIntMultShortHashMap: int loadFactor> = i1;
        return;

     label2:
        i2 = i2 << 1;
        goto label0;

     label3:
        z0 = 0;
        goto label1;
    }

    private void increaseSize()
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] r1, $r4, $r5, $r6, $r7;
        com.xxx.yyy.ZipIntMultShortHashMap$Element r2, r3, $r8, $r9;
        boolean $z0, $z1;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        $z0 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: boolean isPowerOfTwo>;
        if $z0 == 0 goto label2;

        $r4 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i3 = lengthof $r4;
        i0 = $i3 << 1;

     label0:
        r1 = newarray (com.xxx.yyy.ZipIntMultShortHashMap$Element)[i0];
        i1 = 0;

     label1:
        $r5 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i4 = lengthof $r5;
        if i1 < $i4 goto label3;

        r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets> = r1;
        return;

     label2:
        $r6 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i5 = lengthof $r6;
        $i6 = $i5 << 1;
        i0 = $i6 - 1;
        goto label0;

     label3:
        $r7 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        r2 = $r7[i1];

     label4:
        if r2 != null goto label5;

        i1 = i1 + 1;
        goto label1;

     label5:
        $z1 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: boolean isPowerOfTwo>;
        if $z1 == 0 goto label8;

        $i7 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: int key>;
        $i8 = 2147483647 & $i7;
        $i9 = i0 - 1;
        i2 = $i8 & $i9;

     label6:
        r3 = r1[i2];
        if r3 != null goto label10;

        r1[i2] = r2;

     label7:
        $r8 = r2;
        r2 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        $r8.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next> = null;
        goto label4;

     label8:
        $i10 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: int key>;
        $i11 = 2147483647 & $i10;
        i2 = $i11 % i0;
        goto label6;

     label9:
        r3 = r3.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;

     label10:
        $r9 = r3.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        if $r9 != null goto label9;

        r3.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next> = r2;
        goto label7;
    }

    public void clear()
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0, $i1;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] $r1, $r2;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 = 0;

     label0:
        $r1 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i1 = lengthof $r1;
        if i0 < $i1 goto label1;

        r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size> = 0;
        return;

     label1:
        $r2 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $r2[i0] = null;
        i0 = i0 + 1;
        goto label0;
    }

    public boolean containsKey(int)
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0;
        com.xxx.yyy.ZipIntMultShortHashMap$Element $r1;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 := @parameter0: int;
        $r1 = virtualinvoke r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element get(int)>(i0);
        if $r1 == null goto label0;

        return 1;

     label0:
        return 0;
    }

    public com.xxx.yyy.ZipIntMultShortHashMap$Element get(int)
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] $r1, $r2, $r4;
        com.xxx.yyy.ZipIntMultShortHashMap$Element r3;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 := @parameter0: int;
        $z0 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: boolean isPowerOfTwo>;
        if $z0 == 0 goto label1;

        $i2 = i0 & 2147483647;
        $r1 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i3 = lengthof $r1;
        $i4 = $i3 - 1;
        i1 = $i2 & $i4;

     label0:
        $r2 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        r3 = $r2[i1];
        if r3 != null goto label2;

        return null;

     label1:
        $i5 = i0 & 2147483647;
        $r4 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i6 = lengthof $r4;
        i1 = $i5 % $i6;
        goto label0;

     label2:
        $i7 = r3.<com.xxx.yyy.ZipIntMultShortHashMap$Element: int key>;
        if $i7 != i0 goto label3;

        return r3;

     label3:
        r3 = r3.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        if r3 != null goto label2;

        return null;
    }

    public boolean isEmpty()
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int $i0;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        $i0 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        if $i0 != 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public int[] keys()
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int[] r1;
        int i0, i1, $i2, $i3, $i4;
        com.xxx.yyy.ZipIntMultShortHashMap$Element r2;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] $r3, $r4;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        $i2 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        r1 = newarray (int)[$i2];
        i0 = 0;
        i1 = 0;

     label0:
        $r3 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i3 = lengthof $r3;
        if i1 < $i3 goto label1;

        return r1;

     label1:
        $r4 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        r2 = $r4[i1];

     label2:
        if r2 != null goto label3;

        i1 = i1 + 1;
        goto label0;

     label3:
        $i4 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: int key>;
        r1[i0] = $i4;
        i0 = i0 + 1;
        r2 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        goto label2;
    }

    public boolean put(int, short)
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i18, $i20, $i23, $i24, $i25, $i26, $i28, $i30, $i32, $i33;
        short s1, $s11, $s13, $s19, $s21, $s22, $s27, $s29, $s31;
        com.xxx.yyy.ZipIntMultShortHashMap$Element r1, r2, r16, r17;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] $r3, $r4, $r5, $r8, $r9, $r20;
        boolean $z0;
        short[] $r6, $r7, $r10, $r11, $r12, r13, $r14, $r15, $r18, $r19;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 := @parameter0: int;
        s1 := @parameter1: short;
        $i3 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        $i4 = 100 * $i3;
        $r3 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i5 = lengthof $r3;
        $i6 = $i4 / $i5;
        $i7 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int loadFactor>;
        if $i6 <= $i7 goto label0;

        specialinvoke r0.<com.xxx.yyy.ZipIntMultShortHashMap: void increaseSize()>();

     label0:
        $z0 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: boolean isPowerOfTwo>;
        if $z0 == 0 goto label2;

        $i8 = i0 & 2147483647;
        $r4 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i9 = lengthof $r4;
        $i10 = $i9 - 1;
        i2 = $i8 & $i10;

     label1:
        $r5 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        r1 = $r5[i2];
        if r1 != null goto label3;

        r2 = new com.xxx.yyy.ZipIntMultShortHashMap$Element;
        $r6 = newarray (short)[3];
        specialinvoke r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: void <init>(int,short[])>(i0, $r6);
        $r7 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $r7[0] = s1;
        $s11 = r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size>;
        $i12 = 1 + $s11;
        $s13 = (short) $i12;
        r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size> = $s13;
        $r8 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $r8[i2] = r2;
        $i14 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        $i15 = 1 + $i14;
        r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size> = $i15;
        return 1;

     label2:
        $i16 = i0 & 2147483647;
        $r9 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i17 = lengthof $r9;
        i2 = $i16 % $i17;
        goto label1;

     label3:
        $i18 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: int key>;
        if $i18 != i0 goto label5;

        $s19 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size>;
        $i20 = 1 + $s19;
        $s21 = (short) $i20;
        r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size> = $s21;
        $s22 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size>;
        $r10 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $i23 = lengthof $r10;
        if $s22 != $i23 goto label4;

        $r11 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $r12 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $i24 = lengthof $r12;
        $i25 = 2 * $i24;
        r13 = newarray (short)[$i25];
        $r14 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $i26 = lengthof $r14;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, r13, 0, $i26);
        r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values> = r13;

     label4:
        $r15 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $s27 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size>;
        $i28 = $s27 - 1;
        $r15[$i28] = s1;
        return 1;

     label5:
        r16 = r1;
        r1 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        if r1 != null goto label3;

        r17 = new com.xxx.yyy.ZipIntMultShortHashMap$Element;
        $r18 = newarray (short)[3];
        specialinvoke r17.<com.xxx.yyy.ZipIntMultShortHashMap$Element: void <init>(int,short[])>(i0, $r18);
        $r19 = r17.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short[] values>;
        $r19[0] = s1;
        $s29 = r17.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size>;
        $i30 = 1 + $s29;
        $s31 = (short) $i30;
        r17.<com.xxx.yyy.ZipIntMultShortHashMap$Element: short size> = $s31;
        $r20 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $r20[i2] = r17;
        $i32 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        $i33 = 1 + $i32;
        r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size> = $i33;
        r16.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next> = r17;
        return 1;
    }

    public short remove(int)
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.xxx.yyy.ZipIntMultShortHashMap$Element r1, r2, $r7, $r8;
        boolean $z0;
        com.xxx.yyy.ZipIntMultShortHashMap$Element[] $r3, $r4, $r5, $r6;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        i0 := @parameter0: int;
        $z0 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: boolean isPowerOfTwo>;
        if $z0 == 0 goto label1;

        $i2 = i0 & 2147483647;
        $r3 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i3 = lengthof $r3;
        $i4 = $i3 - 1;
        i1 = $i2 & $i4;

     label0:
        $r4 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        r1 = $r4[i1];
        if r1 != null goto label2;

        return -1;

     label1:
        $i5 = i0 & 2147483647;
        $r5 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $i6 = lengthof $r5;
        i1 = $i5 % $i6;
        goto label0;

     label2:
        r2 = null;

     label3:
        $i7 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: int key>;
        if $i7 != i0 goto label6;

        if r2 != null goto label5;

        $r6 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: com.xxx.yyy.ZipIntMultShortHashMap$Element[] buckets>;
        $r7 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        $r6[i1] = $r7;

     label4:
        $i8 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        $i9 = $i8 - 1;
        r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size> = $i9;
        return 1;

     label5:
        $r8 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        r2.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next> = $r8;
        goto label4;

     label6:
        r2 = r1;
        r1 = r1.<com.xxx.yyy.ZipIntMultShortHashMap$Element: com.xxx.yyy.ZipIntMultShortHashMap$Element next>;
        if r1 != null goto label3;

        return -1;
    }

    public int size()
    {
        com.xxx.yyy.ZipIntMultShortHashMap r0;
        int $i0;

        r0 := @this: com.xxx.yyy.ZipIntMultShortHashMap;
        $i0 = r0.<com.xxx.yyy.ZipIntMultShortHashMap: int size>;
        return $i0;
    }
}
