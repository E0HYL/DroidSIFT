package mySoot;

import mySoot.util.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.io.*;

import soot.ArrayType;
import soot.G;
import soot.Local;
import soot.Modifier;
import soot.PackManager;
import soot.RefType;
import soot.Scene;
import soot.SceneTransformer;
import soot.SootClass;
import soot.SootMethod;
import soot.SourceLocator;
import soot.Transform;
import soot.Type;
import soot.Unit;
import soot.Value;
import soot.ValueBox;
import soot.VoidType;
import soot.jimple.IdentityStmt;
import soot.jimple.IntConstant;
import soot.jimple.JasminClass;
import soot.jimple.Jimple;
import soot.jimple.JimpleBody;
import soot.jimple.Stmt;
import soot.jimple.StringConstant;
import soot.jimple.ThisRef;
import soot.jimple.internal.JNewExpr;
import soot.jimple.toolkits.callgraph.CHATransformer;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Targets;
import soot.toolkits.graph.ExceptionalUnitGraph;
import soot.util.Chain;
import soot.util.JasminOutputStream;
import soot.EntryPoints;
import soot.jimple.*;
import soot.options.Options;
//import soot.Singletons;
import soot.*;

import java.io.*;
import java.util.*;
//import org.apache.commons.io.FileUtils;

public class CallGraphExample {
	
	public static String INFO_SOURCE;
	
	//public static int ANDROID_API_LEVEL = 8;

	//public static final String CLASSPATH = "/home/muzhang/workspace/sootTest/test/test/";
	//public static final String ANDROID = "/home/muzhang/workspace/sootTest/test/android.jar";
	//public static final String CLASSPATH = MyConstants.CLASSPATH;
	
	public static String CLASSPATH;
	public static String PROCESS_DIR;
	public static String LIB_DIR;
	
	public static String LOG;
	public static String CONF;
	
	//public static String ANDROID;
	
	
	public static String MXPARSER;
	public static String COMMON_LOGGING;
	public static String COMMON_CODEC;
	//public static String ANDROID_14;
	
	public static String ANDROID_17;
	public static String ANDROID_16;
	public static String ANDROID_15;
	public static String ANDROID_10;
	public static String ANDROID_8;
	public static String ANDROID_7;
	public static String ANDROID_4;
	public static String ANDROID_3;
	
	public static String GOOGLE_MAPS_17;
	public static String GOOGLE_MAPS_16;
	public static String GOOGLE_MAPS_15;
	public static String GOOGLE_MAPS_10;
	public static String GOOGLE_MAPS_8;
	public static String GOOGLE_MAPS_7;
	public static String GOOGLE_MAPS_4;
	public static String GOOGLE_MAPS_3;
	
	public static String GOOGLE_ANALYTICS;
	public static String GOOGLE_ANALYTICS_V2;
	public static String GOOGLE_ADMOB_ADS;
	
	public static String JAVA = MyConstants.JAVA;
	
	public static String OUTPUT;
	public static String OUTPUT_DIR;
	public static String OUTPUT_PROCESS_DIR;
	
	private OnCreateTransformer m_OnCreateTransformer;
	private CallGraphTransformer cgTransformer;
	private PackageNameTransformer pkgTransformer;
	private FindSourcesTransformer findSourcesTransformer;
	private LeakSourceTransformer leakSourceTransformer;
	private LeakContactsTransformer leakContactsTransformer;
	private ResolveReflectionTransformer resolveReflectionTransformer;
	private LocTransformer locTransformer;
	private KillPhantomTransformer killPhantomTransformer;
	public static FindUncalledMethodsTransformer findUncalledMethodsTransformer;
	public static FindUncalledOverridingMethodsTransformer findUncalledOverridingMethodsTransformer;
	
	public static List<String> appUncalledMethods;
	public static List<String> appMethods;
	public static List<String> appCalledMethods;
	public static List<String> uncalledOverridingFrameworkMethods;
	
	//public static LinkedHashMap<String, String> entryPoints;
	public static LinkedHashMap<String, LinkedHashMap<String, String>> sourcesLocationMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
	public static LinkedHashMap<String, Integer> sources;
	public static LinkedHashMap<String, Integer> sinks;
	
	private String getRtJars() {
		
		switch(Config.ANDROID_API_LEVEL){
			case 3:
			{
				return ANDROID_3 + ":" + GOOGLE_MAPS_3 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;
			}
			
			case 4:
			{
				return ANDROID_4 + ":" + GOOGLE_MAPS_4 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;
			}
			
			case 7:
			{
				return ANDROID_7 + ":" + GOOGLE_MAPS_7 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;
			}
			
			case 8:
			{
				return ANDROID_8 + ":" + GOOGLE_MAPS_8 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;
			}
			
			case 10:
			{
				return ANDROID_10 + ":" + GOOGLE_MAPS_10 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;
			}
			
			case 15:
			{
				return ANDROID_15 + ":" + GOOGLE_MAPS_15 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS_V2;
			}
			
			case 16:
			{
				return ANDROID_16 + ":" + GOOGLE_MAPS_16 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS_V2;
			}
			
			case 17:
			{
				return ANDROID_17 + ":" + GOOGLE_MAPS_17 + ":" + COMMON_CODEC + ":" 
						+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;
			}
			
			default:
				return ANDROID_8 + ":" + GOOGLE_MAPS_8 + ":" + COMMON_CODEC + ":" 
				+ GOOGLE_ADMOB_ADS + ":" + GOOGLE_ANALYTICS;		
		}	
						
	}

	private String getClassPath() {
		return this.CLASSPATH;
	}
	
	

	private void run() {
		
		
		System.out.println("kill phantoms first!");
		killPhantoms();
		G.reset();
				
		System.out.println("resolving reflections");
		try{
			resolveReflection();
		}catch(Exception e){
			e.printStackTrace();
		}
		G.reset();
		
		/*
		System.out.println("finding out all classes...");
		findNaiveEntryPoints();
		// reset soot
		G.reset();
		*/
		
		findUncalledMethods();
		appMethods = findUncalledMethodsTransformer.getAppMethods();
		appCalledMethods = findUncalledMethodsTransformer.getCalledMethods();
		appUncalledMethods = new ArrayList<String>();
		for(String appMethod : appMethods){
			if(!appCalledMethods.contains(appMethod)){
				if(!appUncalledMethods.contains(appMethod)){
					appUncalledMethods.add(appMethod);
				}
			}
		}
		
		
		System.out.println(appUncalledMethods.size() + " Uncalled Methods:");
		for(String appUncalledMethod : appUncalledMethods){
			System.out.println(appUncalledMethod);
		}
		
		
		G.reset();
		
		findUncalledOverridingMethods();
		uncalledOverridingFrameworkMethods = findUncalledOverridingMethodsTransformer.getUncalledOverridingFrameworkMethods();
		
		System.out.println(uncalledOverridingFrameworkMethods.size() + " Uncalled Overriding Framework Methods:");
		for(String override : uncalledOverridingFrameworkMethods){
			System.out.println(override);
		}
		
		G.reset();
		
		
		System.out.println("looking for all sources and sinks in the program...");
		scanForSourcesAndSinks();
		G.reset();
		
		sources = findSourcesTransformer.getSources();
		sinks = findSourcesTransformer.getSinks();
		
		System.out.println("locating all sources...");
				
		Set<String> keySet = sources.keySet();
		Iterator<String> iter = keySet.iterator();
		while(iter.hasNext()){
			String signature = iter.next();
			
			INFO_SOURCE = signature;
			System.out.println("INFO_SOURCE: " + signature);
			locateSources();
			G.reset();
			sourcesLocationMap.put(signature, leakSourceTransformer.getClassToMethod());
		}		
		
		/*
		findContactsSources();
		G.reset();
		entryPoints = leakContactsTransformer.getClassToMethod();
		System.out.println("entry points:" + entryPoints);
		*/
		
		
		System.out.println("find out all packages...");
		findPackages();
		G.reset();
		
		countInitLOC();
		System.out.println("original LOC: " + locTransformer.totalLOC());
		G.reset();

		System.out.println("creating bool wrappers...");
		createBoolWrapper();
		G.reset();
			
		
		System.out.println("starting data-flow analysis...");
		doCallGraphAnalysis();
		G.reset();
		
		
		
		countFinalLOC();
		long time = System.currentTimeMillis();
		System.out.println("O4 LOC: " + locTransformer.totalLOC());
		System.out.println("Counting (Mostly I/O) TIME: " + (System.currentTimeMillis()-time));
		G.reset();
		
		
	}
	
	private void createToastExample(String packageName){
		
		Scene.v().loadClassAndSupport("android.app.Activity");
		Scene.v().loadClassAndSupport("android.widget.Toast");
		Scene.v().loadClassAndSupport("android.content.Context");
		
		String toastTempClass = "";
        if(packageName.equals("")){
        	toastTempClass = MyConstants.toastTemp;
        }else{
        	toastTempClass = packageName + "." + MyConstants.toastTemp;
        }
        
        SootClass sClass = new SootClass(toastTempClass, Modifier.PUBLIC);
        String className = sClass.getName();
        
        sClass.setSuperclass(Scene.v().getSootClass("android.app.Activity"));
        
        Scene.v().addClass(sClass);
        
        {
	        SootMethod method = new SootMethod("<init>", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(toastTempClass));
	        body.getLocals().add(ref0);
	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(toastTempClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<android.app.Activity: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
        
        {
	        SootMethod method = new SootMethod("toast", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(toastTempClass));
	        body.getLocals().add(ref0);
	        
	        Local ref1;
			ref1 = Jimple.v().newLocal("r1", RefType.v("android.widget.Toast"));
	        body.getLocals().add(ref1);
	        
	        Local ref2;
	        ref2 = Jimple.v().newLocal("r2", RefType.v("android.content.Context"));
	        body.getLocals().add(ref2);
	        
	        //r0 := @this: TestToast;	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(toastTempClass))));	        
	        
	        //$r2 = virtualinvoke r0.<TestToast: android.content.Context getApplicationContext()>();
	        SootMethod toCall1 = Scene.v().getMethod("<android.content.Context: android.content.Context getApplicationContext()>");
	        units.add(Jimple.v().newAssignStmt(ref2, Jimple.v().newVirtualInvokeExpr(ref0, toCall1.makeRef())));
	        
	        //r1 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>($r2, "hello", 0);
	        SootMethod toCall2 = Scene.v().getMethod("<android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>");
	        List<Value> args = new ArrayList<Value>();
	        args.add(ref2);
	        args.add(StringConstant.v("hello"));
	        args.add(IntConstant.v(0));
	        units.add(Jimple.v().newAssignStmt(ref1, Jimple.v().newStaticInvokeExpr(toCall2.makeRef(), args)));
	        
	        //virtualinvoke r1.<android.widget.Toast: void show()>();
			SootMethod toCall3 = Scene.v().getMethod("<android.widget.Toast: void show()>");
			units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(ref1, toCall3.makeRef())));
	        
	       	//return        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
		
		
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }				
		
	}
	
	private void createDialogExample(String packageName){
		
		Scene.v().loadClassAndSupport("android.app.Activity");
		Scene.v().loadClassAndSupport("android.app.AlertDialog");
		Scene.v().loadClassAndSupport("android.app.AlertDialog$Builder");
		
		String showDialogTempClass = "";
        if(packageName.equals("")){
        	showDialogTempClass = MyConstants.showDialogTemp;
        }else{
        	showDialogTempClass = packageName + "." + MyConstants.showDialogTemp;
        }
        
        String listenerClass = "";
        if(packageName.equals("")){
        	listenerClass = MyConstants.dialogListener;
        }else{
        	listenerClass = packageName + "." + MyConstants.dialogListener;
        }
        
        SootClass sClass = new SootClass(showDialogTempClass, Modifier.PUBLIC);
        String className = sClass.getName();
        
        sClass.setSuperclass(Scene.v().getSootClass("android.app.Activity"));
        
        Scene.v().addClass(sClass);
        
        {
	        SootMethod method = new SootMethod("<init>", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(showDialogTempClass));
	        body.getLocals().add(ref0);
	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(showDialogTempClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<android.app.Activity: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
		
	
        {
	        SootMethod method = new SootMethod("showDialog", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        
	        Local ref0;        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(showDialogTempClass));
	        body.getLocals().add(ref0);
	        
	        Local ref1;
	        ref1 = Jimple.v().newLocal("r1", RefType.v("android.app.AlertDialog$Builder"));
	        body.getLocals().add(ref1);
	        
	        Local ref2;
	        ref2 = Jimple.v().newLocal("r2", RefType.v("android.app.AlertDialog"));
	        body.getLocals().add(ref2);
	        
	        Local ref3;
	        ref3 = Jimple.v().newLocal("r3", RefType.v(listenerClass));
	        body.getLocals().add(ref3);
	        
	        Local ref4;
	        ref4 = Jimple.v().newLocal("r4", RefType.v(listenerClass));
	        body.getLocals().add(ref4);
	        
	        //r0 := @this: ShowDialog;
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(showDialogTempClass))));
	        
	        //$r1 = new android.app.AlertDialog$Builder;        
	        units.add(Jimple.v().newAssignStmt(ref1, new JNewExpr(RefType.v("android.app.AlertDialog$Builder"))));

	        
	        //specialinvoke $r1.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>(r0);
	        SootMethod toCall1 = Scene.v().getMethod("<android.app.AlertDialog$Builder: void <init>(android.content.Context)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref1, toCall1.makeRef(), ref0)));
	        
	        
	        //r2 = virtualinvoke $r1.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();
	        SootMethod toCall2 = Scene.v().getMethod("<android.app.AlertDialog$Builder: android.app.AlertDialog create()>");
	        units.add(Jimple.v().newAssignStmt(ref2, Jimple.v().newVirtualInvokeExpr(ref1, toCall2.makeRef())));
	        
	        //virtualinvoke r2.<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>("Reset...");
	        SootMethod toCall3 = Scene.v().getMethod("<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(ref2, toCall3.makeRef(), StringConstant.v("Start..."))));
	        
	        //virtualinvoke r2.<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>("R u sure?");
	        SootMethod toCall4 = Scene.v().getMethod("<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(ref2, toCall4.makeRef(), StringConstant.v("R u sure?"))));
	        
	        //$r4 = new MyListener;
	        units.add(Jimple.v().newAssignStmt(ref4, new JNewExpr(RefType.v(listenerClass))));
	        
	        //specialinvoke $r4.<MyListener: void <init>()>();
	        SootMethod toCall5 = Scene.v().getMethod("<" + packageName + ".MyListener: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref4, toCall5.makeRef())));
	        
	        //r3 = $r4;
	        units.add(Jimple.v().newAssignStmt(ref3, ref4));
	        
	        //virtualinvoke r2.<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>("OK", r3);
	        SootMethod toCall6 = Scene.v().getMethod("<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(ref2, toCall6.makeRef(), StringConstant.v("OK"), ref3)));
			
			//virtualinvoke r2.<android.app.AlertDialog: void show()>();
			SootMethod toCall7 = Scene.v().getMethod("<android.app.Dialog: void show()>");
			units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(ref2, toCall7.makeRef())));
			
			units.add(Jimple.v().newReturnVoidStmt());
	        
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
		
	}
	
	private void createQueryExample(String packageName){
		
		Scene.v().loadClassAndSupport("android.app.Activity");
		Scene.v().loadClassAndSupport("android.content.IntentFilter");
		Scene.v().loadClassAndSupport("android.content.Intent");
		Scene.v().loadClassAndSupport("android.content.ComponentName");
		Scene.v().loadClassAndSupport("java.lang.InterruptedException");
		Scene.v().loadClassAndSupport("java.lang.Throwable");
		Scene.v().loadClassAndSupport("android.content.Context");
		Scene.v().loadClassAndSupport("java.lang.ArithmeticException");
		Scene.v().loadClassAndSupport("java.lang.ClassCastException");
		Scene.v().loadClassAndSupport("java.lang.IllegalMonitorStateException");
		Scene.v().loadClassAndSupport("java.lang.IndexOutOfBoundsException");
		Scene.v().loadClassAndSupport("java.lang.ArrayIndexOutOfBoundsException");
		Scene.v().loadClassAndSupport("java.lang.NegativeArraySizeException");
		Scene.v().loadClassAndSupport("java.lang.NullPointerException");
		Scene.v().loadClassAndSupport("java.lang.InstantiationError");
		Scene.v().loadClassAndSupport("java.lang.InternalError");
		Scene.v().loadClassAndSupport("java.lang.OutOfMemoryError");
		Scene.v().loadClassAndSupport("java.lang.StackOverflowError");
		Scene.v().loadClassAndSupport("java.lang.UnknownError");
		Scene.v().loadClassAndSupport("java.lang.ThreadDeath");
		Scene.v().loadClassAndSupport("java.lang.ClassCircularityError");
		Scene.v().loadClassAndSupport("java.lang.IllegalAccessError");
		Scene.v().loadClassAndSupport("java.lang.NoClassDefFoundError");
		Scene.v().loadClassAndSupport("java.lang.VerifyError");
		Scene.v().loadClassAndSupport("java.lang.NoSuchFieldError");
		Scene.v().loadClassAndSupport("java.lang.AbstractMethodError");
		Scene.v().loadClassAndSupport("java.lang.NoSuchMethodError");
		Scene.v().loadClassAndSupport("java.lang.UnsatisfiedLinkError");
		
		String queryTempClass = "";
        if(packageName.equals("")){
        	queryTempClass = MyConstants.queryTemp;
        }else{
        	queryTempClass = packageName + "." + MyConstants.queryTemp;
        }
        
        //String registerReceiver = "<" + queryTempClass + ": android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>";
        //String getPackageName = "<" + queryTempClass + ": java.lang.String getPackageName()>";
        //String startService = "<" + queryTempClass + ": android.content.ComponentName startService(android.content.Intent)>";
        //String unregisterReceiver = "<" + queryTempClass + ": void unregisterReceiver(android.content.BroadcastReceiver)>";
        
        String serviceReplyClass = "";
        if(packageName.equals("")){
        	serviceReplyClass = MyConstants.ServiceReply;
        }else{
        	serviceReplyClass = packageName + "." + MyConstants.ServiceReply;
        }
        
        String setReply = "<" + serviceReplyClass + ": void setReply(boolean)>";
        String getReply = "<" + serviceReplyClass + ": boolean getReply()>";
        String initReply = "<" + serviceReplyClass + ": void <init>()>";
        
        String bcrClass = "";
        if(packageName.equals("")){
        	bcrClass = MyConstants.BCReceiver;
        }else{
        	bcrClass = packageName + "." + MyConstants.BCReceiver;
        }
        
        String initBcr = "<" + bcrClass + ": void <init>("+ serviceReplyClass +")>";
        
        SootClass sClass = new SootClass(queryTempClass, Modifier.PUBLIC);
        String className = sClass.getName();
        
        sClass.setSuperclass(Scene.v().getSootClass("android.app.Activity"));        
        Scene.v().addClass(sClass);
        
        {
	        SootMethod method = new SootMethod("<init>", new ArrayList(), VoidType.v(), Modifier.PUBLIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local r0;	        
	        
	        r0 = Jimple.v().newLocal("r0", RefType.v(queryTempClass));
	        body.getLocals().add(r0);
	        
	        units.add(Jimple.v().newIdentityStmt(r0, Jimple.v().newThisRef(RefType.v(queryTempClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<android.app.Activity: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
		
	
        {
        	List<Type> params = new ArrayList<Type>();
        	params.add(IntType.v());
        	params.add(IntType.v());
        	params.add(RefType.v("java.lang.String"));
        	params.add(RefType.v("java.lang.String"));
	        //SootMethod method = new SootMethod("queryService", new ArrayList(), BooleanType.v(), Modifier.PUBLIC);
        	SootMethod method = new SootMethod("queryService", params, BooleanType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        
	        Local r0;        
	        r0 = Jimple.v().newLocal("r0", RefType.v(queryTempClass));
	        body.getLocals().add(r0);
	        
	        Local p0;
	        p0 = Jimple.v().newLocal("p0", IntType.v());
	        body.getLocals().add(p0);
	        
	        Local p1;
	        p1 = Jimple.v().newLocal("p1", IntType.v());
	        body.getLocals().add(p1);
	        
	        Local p2;
	        p2 = Jimple.v().newLocal("p2", RefType.v("java.lang.String"));
	        body.getLocals().add(p2);
	        
	        Local p3;
	        p3 = Jimple.v().newLocal("p3", RefType.v("java.lang.String"));
	        body.getLocals().add(p3);
	        
	        Local r1;
	        r1 = Jimple.v().newLocal("r1", RefType.v(serviceReplyClass));
	        body.getLocals().add(r1);
	        
	        Local r2;
	        r2 = Jimple.v().newLocal("r2", RefType.v("android.content.IntentFilter"));
	        body.getLocals().add(r2);
	        
	        Local r3;
	        r3 = Jimple.v().newLocal("r3", RefType.v(bcrClass));
	        body.getLocals().add(r3);
	        
	        Local r5;
	        r5 = Jimple.v().newLocal("r5", RefType.v("android.content.Intent"));
	        body.getLocals().add(r5);
	        
	        Local r6;
	        r6 = Jimple.v().newLocal("r6", RefType.v("android.content.ComponentName"));
	        body.getLocals().add(r6);
	        
	        Local r8;
	        r8 = Jimple.v().newLocal("r8", RefType.v("java.lang.String"));
	        body.getLocals().add(r8);
	        
	        Local z0;
	        z0 = Jimple.v().newLocal("z0", BooleanType.v());
	        body.getLocals().add(z0);
	        
	        Local r15;
	        r15 = Jimple.v().newLocal("r15", RefType.v("java.lang.InterruptedException"));
	        body.getLocals().add(r15);
	        
	        Local r16;
	        r16 = Jimple.v().newLocal("r16", RefType.v("java.lang.InterruptedException"));
	        body.getLocals().add(r16);
	        
	        Local r17;
	        r17 = Jimple.v().newLocal("r17", RefType.v("java.lang.Throwable"));
	        body.getLocals().add(r17);
	        
	        Local r18;
	        r18 = Jimple.v().newLocal("r18", RefType.v("java.lang.Throwable"));
	        body.getLocals().add(r18);
	        
	        units.add(Jimple.v().newIdentityStmt(r0, Jimple.v().newThisRef(RefType.v(queryTempClass))));
	        
	        units.add(Jimple.v().newIdentityStmt(p0, Jimple.v().newParameterRef(IntType.v(), 0)));
	        units.add(Jimple.v().newIdentityStmt(p1, Jimple.v().newParameterRef(IntType.v(), 1)));
	        units.add(Jimple.v().newIdentityStmt(p2, Jimple.v().newParameterRef(RefType.v("java.lang.String"), 2)));
	        units.add(Jimple.v().newIdentityStmt(p3, Jimple.v().newParameterRef(RefType.v("java.lang.String"), 3)));
	        
	        units.add(Jimple.v().newAssignStmt(r1, new JNewExpr(RefType.v(serviceReplyClass))));
	        SootMethod toCall1 = Scene.v().getMethod(initReply);
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r1, toCall1.makeRef())));
	        
	        units.add(Jimple.v().newAssignStmt(r2, new JNewExpr(RefType.v("android.content.IntentFilter"))));
	        SootMethod toCall2 = Scene.v().getMethod("<android.content.IntentFilter: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r2, toCall2.makeRef())));
	        
	        SootMethod toCall3 = Scene.v().getMethod("<android.content.IntentFilter: void addAction(java.lang.String)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r2, toCall3.makeRef(), StringConstant.v("com.example.policymanager.REPLY"))));
	        
	        units.add(Jimple.v().newAssignStmt(r3, new JNewExpr(RefType.v(bcrClass))));
	        SootMethod toCall4 = Scene.v().getMethod(initBcr);
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r3, toCall4.makeRef(), r1)));
	        
	        //SootMethod toCall5 = Scene.v().getMethod(registerReceiver);
	        SootMethod toCall5 = Scene.v().getMethod("<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r0, toCall5.makeRef(), r3, r2)));
	        
	        units.add(Jimple.v().newAssignStmt(r5, new JNewExpr(RefType.v("android.content.Intent"))));
	        SootMethod toCall6 = Scene.v().getMethod("<android.content.Intent: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r5, toCall6.makeRef())));
	        
	        units.add(Jimple.v().newAssignStmt(r6, new JNewExpr(RefType.v("android.content.ComponentName"))));
	        SootMethod toCall7 = Scene.v().getMethod("<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r6, toCall7.makeRef(), StringConstant.v("com.example.policymanager"), StringConstant.v("com.example.policymanager.MessengerService"))));
	        
	        SootMethod toCall8 = Scene.v().getMethod("<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall8.makeRef(), r6)));
	        
	        //SootMethod toCall9 = Scene.v().getMethod(getPackageName);
	        SootMethod toCall9 = Scene.v().getMethod("<android.content.Context: java.lang.String getPackageName()>");
	        units.add(Jimple.v().newAssignStmt(r8, Jimple.v().newVirtualInvokeExpr(r0, toCall9.makeRef())));
	        
	        SootMethod toCall10 = Scene.v().getMethod("<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall10.makeRef(), StringConstant.v("package"), r8)));
	        //units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall10.makeRef(), StringConstant.v("type"), StringConstant.v("IMEI"))));
	        //units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall10.makeRef(), StringConstant.v("param"), StringConstant.v("http://www.syr.edu/"))));
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall10.makeRef(), StringConstant.v("type"), p2)));
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall10.makeRef(), StringConstant.v("param"), p3)));
	        
	        SootMethod toCall11 = Scene.v().getMethod("<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>");
	        //units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall11.makeRef(), StringConstant.v("source"), IntConstant.v(0))));
	        //units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall11.makeRef(), StringConstant.v("sink"), IntConstant.v(0))));
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall11.makeRef(), StringConstant.v("source"), p0)));
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall11.makeRef(), StringConstant.v("sink"), p1)));
	        
	        //SootMethod toCall12 = Scene.v().getMethod(startService);
	        SootMethod toCall12 = Scene.v().getMethod("<android.content.Context: android.content.ComponentName startService(android.content.Intent)>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r0, toCall12.makeRef(), r5)));
	        
	        //entermonitor r1;
	        units.add(Jimple.v().newEnterMonitorStmt(r1));
	        
	        //label0:	        
	        SootMethod toCall13 = Scene.v().getMethod("<java.lang.Object: void wait()>");
	        Unit label0 = Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r1, toCall13.makeRef()));
	        units.add(label0);
	        
	        //label1:
	        Unit label1 = Jimple.v().newExitMonitorStmt(r1);
	        units.add(label1);
	        
	        //label2:
	        //SootMethod toCall14 = Scene.v().getMethod(unregisterReceiver);
	        SootMethod toCall14 = Scene.v().getMethod("<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>");
	        Unit label2 = Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r0, toCall14.makeRef(), r3));
	        units.add(label2);
	        
	        SootMethod toCall15 = Scene.v().getMethod(getReply);
	        units.add(Jimple.v().newAssignStmt(z0, Jimple.v().newVirtualInvokeExpr(r1, toCall15.makeRef())));
	        
	        units.add(Jimple.v().newReturnStmt(z0));
	        
	        //label3:
	        Unit label3 = Jimple.v().newIdentityStmt(r15, Jimple.v().newCaughtExceptionRef());
	        units.add(label3);
	        units.add(Jimple.v().newAssignStmt(r16, r15));
	        
	        //label4:
	        SootMethod toCall16 = Scene.v().getMethod("<java.lang.Throwable: void printStackTrace()>");
	        Unit label4 = Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r16, toCall16.makeRef()));
	        units.add(label4);
	        
	        units.add(Jimple.v().newGotoStmt(label1));
	        
	        //label5:
	        Unit label5 = Jimple.v().newIdentityStmt(r17, Jimple.v().newCaughtExceptionRef());
	        units.add(label5);
	        units.add(Jimple.v().newAssignStmt(r18, r17));
	        
	        units.add(Jimple.v().newExitMonitorStmt(r1));
	        
	        //label6:
	        Unit label6 = Jimple.v().newThrowStmt(r18);
	        units.add(label6);
	        
	        //exception handler
	        SootClass ex1 = Scene.v().getSootClass("java.lang.InterruptedException");
	        body.getTraps().add(Jimple.v().newTrap(ex1, label0, label1, label3));
	        
	        SootClass ex2 = Scene.v().getSootClass("java.lang.Throwable");        	
        	body.getTraps().add(Jimple.v().newTrap(ex2, label0, label1, label5));
        	body.getTraps().add(Jimple.v().newTrap(ex2, label1, label2, label5));
        	body.getTraps().add(Jimple.v().newTrap(ex2, label4, label6, label5));
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
		
	}
	
	private void createDialogListener(String packageName){
		
		System.out.println("creating Dialog Listener in package " + packageName);
		
		Scene.v().loadClassAndSupport("java.lang.Object");
		Scene.v().loadClassAndSupport("android.content.DialogInterface");
		Scene.v().loadClassAndSupport("android.content.DialogInterface$OnClickListener");
		
		String listenerClass = "";
        if(packageName.equals("")){
        	listenerClass = MyConstants.dialogListener;
        }else{
        	listenerClass = packageName + "." + MyConstants.dialogListener;
        }
        
        SootClass sClass = new SootClass(listenerClass, Modifier.PUBLIC);
        String className = sClass.getName();
        
        sClass.setSuperclass(Scene.v().getSootClass("java.lang.Object"));
        sClass.addInterface(Scene.v().getSootClass("android.content.DialogInterface$OnClickListener"));
        
        Scene.v().addClass(sClass);
        
        {
	        SootMethod method = new SootMethod("<init>", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(listenerClass));
	        body.getLocals().add(ref0);
	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(listenerClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<java.lang.Object: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
        
        {
        	List<Type> parameterTypes = new ArrayList<Type>();
        	parameterTypes.add(RefType.v("android.content.DialogInterface"));
        	parameterTypes.add(IntType.v());
        	SootMethod method = new SootMethod("onClick", 
	        		parameterTypes, VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        Local ref1;
	        Local i0;
	        	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(listenerClass));
	        body.getLocals().add(ref0);
	        
	        ref1 = Jimple.v().newLocal("r1", RefType.v("android.content.DialogInterface"));
	        body.getLocals().add(ref1);
	        
	        i0 = Jimple.v().newLocal("i0", IntType.v());
	        body.getLocals().add(i0);
	        	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(listenerClass))));
	        units.add(Jimple.v().newIdentityStmt(ref1, Jimple.v().newParameterRef(RefType.v("android.content.DialogInterface"), 0)));
	        units.add(Jimple.v().newIdentityStmt(i0, Jimple.v().newParameterRef(IntType.v(), 1)));	        
	        
	        units.add(Jimple.v().newReturnVoidStmt());
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
	}
	
	private void createBroadcastReceiver(String packageName){
		
		System.out.println("creating BroadcastReceiver in package " + packageName);
		
		Scene.v().loadClassAndSupport("java.lang.Object");
		Scene.v().loadClassAndSupport("java.lang.Throwable");
		Scene.v().loadClassAndSupport("android.content.BroadcastReceiver");
		Scene.v().loadClassAndSupport("android.content.Context");
		Scene.v().loadClassAndSupport("android.content.Intent");
		Scene.v().loadClassAndSupport("java.lang.ArithmeticException");
		Scene.v().loadClassAndSupport("java.lang.ArrayStoreException");
		Scene.v().loadClassAndSupport("java.lang.ClassCastException");
		Scene.v().loadClassAndSupport("java.lang.IllegalMonitorStateException");
		Scene.v().loadClassAndSupport("java.lang.IndexOutOfBoundsException");
		Scene.v().loadClassAndSupport("java.lang.ArrayIndexOutOfBoundsException");
		Scene.v().loadClassAndSupport("java.lang.NegativeArraySizeException");
		Scene.v().loadClassAndSupport("java.lang.NullPointerException");
		Scene.v().loadClassAndSupport("java.lang.InstantiationError");
		Scene.v().loadClassAndSupport("java.lang.InternalError");
		Scene.v().loadClassAndSupport("java.lang.OutOfMemoryError");
		Scene.v().loadClassAndSupport("java.lang.StackOverflowError");
		Scene.v().loadClassAndSupport("java.lang.UnknownError");
		Scene.v().loadClassAndSupport("java.lang.ThreadDeath");
		Scene.v().loadClassAndSupport("java.lang.ClassCircularityError");
		Scene.v().loadClassAndSupport("java.lang.IllegalAccessError");
		Scene.v().loadClassAndSupport("java.lang.NoClassDefFoundError");
		Scene.v().loadClassAndSupport("java.lang.VerifyError");
		Scene.v().loadClassAndSupport("java.lang.NoSuchFieldError");
		Scene.v().loadClassAndSupport("java.lang.AbstractMethodError");
		Scene.v().loadClassAndSupport("java.lang.NoSuchMethodError");
		Scene.v().loadClassAndSupport("java.lang.UnsatisfiedLinkError");
		
		String bcrClass = "";
        if(packageName.equals("")){
        	bcrClass = MyConstants.BCReceiver;
        }else{
        	bcrClass = packageName + "." + MyConstants.BCReceiver;
        }
        
        String serviceReplyClass = "";
        if(packageName.equals("")){
        	serviceReplyClass = MyConstants.ServiceReply;
        }else{
        	serviceReplyClass = packageName + "." + MyConstants.ServiceReply;
        }
        
        String setReply = "<" + serviceReplyClass + ": void setReply(boolean)>";
        
        SootClass sClass = new SootClass(bcrClass, Modifier.PUBLIC);
        String className = sClass.getName();
        
        sClass.setSuperclass(Scene.v().getSootClass("android.content.BroadcastReceiver"));        
        Scene.v().addClass(sClass);
        
        SootField reply = new SootField("reply", RefType.v(serviceReplyClass), Modifier.PRIVATE|Modifier.FINAL);
        sClass.addField(reply);
        
        {
        	List<Type> params = new ArrayList<Type>();
        	params.add(RefType.v(serviceReplyClass));
	        SootMethod method = new SootMethod("<init>", params, VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        Local r2;	        
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(bcrClass));
	        body.getLocals().add(ref0);
	        
	        r2 = Jimple.v().newLocal("r2", RefType.v(serviceReplyClass));
	        body.getLocals().add(r2);
	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(bcrClass))));
	        units.add(Jimple.v().newIdentityStmt(r2, Jimple.v().newParameterRef(RefType.v(serviceReplyClass), 0)));
	        
	        units.add(Jimple.v().newAssignStmt(Jimple.v().newInstanceFieldRef(ref0, reply.makeRef()), r2));
	        
	        SootMethod toCall = Scene.v().getMethod("<android.content.BroadcastReceiver: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
        
        {
        	List<Type> parameterTypes = new ArrayList<Type>();
        	parameterTypes.add(RefType.v("android.content.Context"));
        	parameterTypes.add(RefType.v("android.content.Intent"));
        	SootMethod method = new SootMethod("onReceive", parameterTypes, VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local r0;
	        Local r1;
	        Local r2;
	        Local r3, r4, r5;
	        Local z0;
	        Local r6, r7;
	        	        
	        r0 = Jimple.v().newLocal("r0", RefType.v(bcrClass));;
	        body.getLocals().add(r0);
	        
	        r1 = Jimple.v().newLocal("r1", RefType.v("android.content.Context"));
	        body.getLocals().add(r1);
	        
	        r2 = Jimple.v().newLocal("r2", RefType.v("android.content.Intent"));
	        body.getLocals().add(r2);
	        
	        r3 = Jimple.v().newLocal("r3", RefType.v(serviceReplyClass));
	        body.getLocals().add(r3);
	        
	        r4 = Jimple.v().newLocal("r4", RefType.v(serviceReplyClass));
	        body.getLocals().add(r4);
	        
	        r5 = Jimple.v().newLocal("r5", RefType.v(serviceReplyClass));
	        body.getLocals().add(r5);
	        
	        z0 = Jimple.v().newLocal("z0", BooleanType.v());
	        body.getLocals().add(z0);
	        
	        r6 = Jimple.v().newLocal("r6", RefType.v("java.lang.Throwable"));
	        body.getLocals().add(r6);
	        
	        r7 = Jimple.v().newLocal("r7", RefType.v("java.lang.Throwable"));
	        body.getLocals().add(r7);
	        	        
	        units.add(Jimple.v().newIdentityStmt(r0, Jimple.v().newThisRef(RefType.v(bcrClass)))); 
	        units.add(Jimple.v().newIdentityStmt(r1, Jimple.v().newParameterRef(RefType.v("android.content.Context"), 0)));
	        units.add(Jimple.v().newIdentityStmt(r2, Jimple.v().newParameterRef(RefType.v("android.content.Intent"), 1)));
	        
	        units.add(Jimple.v().newAssignStmt(r3, Jimple.v().newInstanceFieldRef(r0, reply.makeRef())));
	        
	        //entermonitor r3;
	        units.add(Jimple.v().newEnterMonitorStmt(r3));
	        
	        //label0:
	        Unit tryBegin = Jimple.v().newAssignStmt(r4, Jimple.v().newInstanceFieldRef(r0, reply.makeRef()));
	        units.add(tryBegin);
	        
	        SootMethod toCall1 = Scene.v().getMethod("<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>");
	        units.add(Jimple.v().newAssignStmt(z0, Jimple.v().newVirtualInvokeExpr(r2, toCall1.makeRef(), StringConstant.v("response"), IntConstant.v(0))));
	        
	        SootMethod toCall2 = Scene.v().getMethod(setReply);
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r4, toCall2.makeRef(), z0)));
	        
	        units.add(Jimple.v().newAssignStmt(r5, Jimple.v().newInstanceFieldRef(r0, reply.makeRef())));
	        
	        SootMethod toCall3 = Scene.v().getMethod("<java.lang.Object: void notify()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(r5, toCall3.makeRef())));
	        
	        //exitmonitor r3;
	        units.add(Jimple.v().newExitMonitorStmt(r3)); 
	        units.add(Jimple.v().newReturnVoidStmt());
	        
	        //label1:
	        Unit handlerBegin = Jimple.v().newIdentityStmt(r6, Jimple.v().newCaughtExceptionRef());
	        units.add(handlerBegin);
	        units.add(Jimple.v().newAssignStmt(r7, r6));
	        units.add(Jimple.v().newExitMonitorStmt(r3));
	        
	        //label2:
	        Unit tryEnd = Jimple.v().newThrowStmt(r7);
	        units.add(tryEnd);
	        
	        //exception handler	        
	        SootClass ex = Scene.v().getSootClass("java.lang.Throwable");        	
        	body.getTraps().add(Jimple.v().newTrap(ex, tryBegin, tryEnd, handlerBegin));
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
	}
	
	private void createOnMultiChoiceClickListener(String packageName){
		
		System.out.println("creating OnMultiChoiceClick Listener in package " + packageName);
		//android.content.DialogInterface.OnMultiChoiceClickListener
		Scene.v().loadClassAndSupport("java.lang.Object");
		Scene.v().loadClassAndSupport("android.content.DialogInterface");		
		Scene.v().loadClassAndSupport("android.content.DialogInterface$OnMultiChoiceClickListener");
		
		String listenerClass = "";
        if(packageName.equals("")){
        	listenerClass = MyConstants.onMultiChoiceClickListener;
        }else{
        	listenerClass = packageName + "." + MyConstants.onMultiChoiceClickListener;
        }
        
        SootClass sClass = new SootClass(listenerClass, Modifier.PUBLIC);
        String className = sClass.getName();
        
        sClass.setSuperclass(Scene.v().getSootClass("java.lang.Object"));
        sClass.addInterface(Scene.v().getSootClass("android.content.DialogInterface$OnMultiChoiceClickListener"));
        
        Scene.v().addClass(sClass);
        
        {
	        SootMethod method = new SootMethod("<init>", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(listenerClass));
	        body.getLocals().add(ref0);
	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(listenerClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<java.lang.Object: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
	        
        }
        
        {
        	List<Type> parameterTypes = new ArrayList<Type>();
        	parameterTypes.add(RefType.v("android.content.DialogInterface"));
        	parameterTypes.add(IntType.v());
        	parameterTypes.add(BooleanType.v());
        	SootMethod method = new SootMethod("onClick", 
	        		parameterTypes, VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        Local ref1;
	        Local i0;
	        Local b0;
	        	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(listenerClass));
	        body.getLocals().add(ref0);
	        
	        ref1 = Jimple.v().newLocal("r1", RefType.v("android.content.DialogInterface"));
	        body.getLocals().add(ref1);
	        
	        i0 = Jimple.v().newLocal("i0", IntType.v());
	        body.getLocals().add(i0);
	        
	        b0 = Jimple.v().newLocal("b0", BooleanType.v());
	        body.getLocals().add(b0);
	        	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(listenerClass))));
	        units.add(Jimple.v().newIdentityStmt(ref1, Jimple.v().newParameterRef(RefType.v("android.content.DialogInterface"), 0)));
	        units.add(Jimple.v().newIdentityStmt(i0, Jimple.v().newParameterRef(IntType.v(), 1)));
	        units.add(Jimple.v().newIdentityStmt(b0, Jimple.v().newParameterRef(BooleanType.v(), 0)));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
	}
	
	
	
	private void createBoolWrapperClass(String packageName){
		
		System.out.println("creating class in package " + packageName);
		
		Scene.v().loadClassAndSupport("java.lang.Object");
        Scene.v().loadClassAndSupport("java.lang.System");
        
        String boolWrapperClass = "";
        if(packageName.equals("")){
        	boolWrapperClass = MyConstants.boolWrapper;
        }else{
        	boolWrapperClass = packageName + "." + MyConstants.boolWrapper;
        }
        
        
     // Declare 'public class BoolWrapper'   
        //SootClass sClass = new SootClass(packageName + "." + MyConstants.boolWrapper, Modifier.PUBLIC);
        SootClass sClass = new SootClass(boolWrapperClass, Modifier.PUBLIC);
     
     // 'extends Object'
        sClass.setSuperclass(Scene.v().getSootClass("java.lang.Object"));
        
        String className = sClass.getName();
        System.out.println(className);
        Scene.v().addClass(sClass);
        
        SootField bool = new SootField("b", BooleanType.v(), Modifier.PUBLIC);
        sClass.addField(bool);
        
                {
	        SootMethod method = new SootMethod("<init>", 
	        		new ArrayList(), VoidType.v(), Modifier.PUBLIC);
	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        //ref0 = Jimple.v().newLocal("r0", RefType.v(packageName + "." + MyConstants.boolWrapper));
	        ref0 = Jimple.v().newLocal("r0", RefType.v(boolWrapperClass));
	        body.getLocals().add(ref0);
	        
	        //units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(packageName + "." + MyConstants.boolWrapper))));
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(boolWrapperClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<java.lang.Object: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
        }       
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
	}
	
	private void createServiceReplyClass(String packageName){
		
		System.out.println("creating class in package " + packageName);
		
		Scene.v().loadClassAndSupport("java.lang.Object");
        Scene.v().loadClassAndSupport("java.lang.System");
        
        String serviceReplyClass = "";
        if(packageName.equals("")){
        	serviceReplyClass = MyConstants.ServiceReply;
        }else{
        	serviceReplyClass = packageName + "." + MyConstants.ServiceReply;
        } 
    
        SootClass sClass = new SootClass(serviceReplyClass, Modifier.PUBLIC);
     
        // 'extends Object'
        sClass.setSuperclass(Scene.v().getSootClass("java.lang.Object"));
        
        String className = sClass.getName();
        System.out.println(className);
        Scene.v().addClass(sClass);
        
        SootField reply = new SootField("reply", BooleanType.v(), Modifier.PRIVATE);
        sClass.addField(reply);
        
        //public void <init>()
        {
	        SootMethod method = new SootMethod("<init>", new ArrayList(), VoidType.v(), Modifier.PUBLIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(serviceReplyClass));
	        body.getLocals().add(ref0);
	        
	        //units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(packageName + "." + MyConstants.boolWrapper))));
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(serviceReplyClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<java.lang.Object: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newAssignStmt(Jimple.v().newInstanceFieldRef(ref0, reply.makeRef()), IntConstant.v(0)));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
        }  
        
        //public boolean getReply()
        {
        	SootMethod method = new SootMethod("getReply", new ArrayList(), BooleanType.v(), Modifier.PUBLIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        
	        Local r0;
	        Local z0;
	        
	        r0 = Jimple.v().newLocal("r0", RefType.v(serviceReplyClass));
	        body.getLocals().add(r0);
	        
	        z0 = Jimple.v().newLocal("z0", BooleanType.v());
	        body.getLocals().add(z0);
	        
	        units.add(Jimple.v().newIdentityStmt(r0, Jimple.v().newThisRef(RefType.v(serviceReplyClass))));
	        units.add(Jimple.v().newAssignStmt(z0, Jimple.v().newInstanceFieldRef(r0, reply.makeRef())));
	        units.add(Jimple.v().newReturnStmt(z0));        
        }
        
        //public void setReply(boolean)
        {
        	List<Type> params = new ArrayList();
        	params.add(BooleanType.v());
        	SootMethod method = new SootMethod("setReply", params, VoidType.v(), Modifier.PUBLIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        
	        Local r0;
	        Local z0;
	        
	        r0 = Jimple.v().newLocal("r0", RefType.v(serviceReplyClass));
	        body.getLocals().add(r0);
	        
	        z0 = Jimple.v().newLocal("z0", BooleanType.v());
	        body.getLocals().add(z0);
	        
	        units.add(Jimple.v().newIdentityStmt(r0, Jimple.v().newThisRef(RefType.v(serviceReplyClass))));
	        units.add(Jimple.v().newIdentityStmt(z0, Jimple.v().newParameterRef(BooleanType.v(), 0)));
	        units.add(Jimple.v().newAssignStmt(Jimple.v().newInstanceFieldRef(r0, reply.makeRef()), z0));
	        units.add(Jimple.v().newReturnVoidStmt());
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
	}
	
	private void createApplicationContextClass(String packageName){
		
		System.out.println("creating class in package " + packageName);
		
		Scene.v().loadClassAndSupport("java.lang.Object");
        Scene.v().loadClassAndSupport("java.lang.System");
        Scene.v().loadClassAndSupport("android.app.Application");
        Scene.v().loadClassAndSupport("android.content.Context");
        
        String appContextClass = "";
        if(packageName.equals("")){
        	appContextClass = MyConstants.application;
        }else{
        	appContextClass = packageName + "." + MyConstants.application;
        } 
    
        SootClass sClass = new SootClass(appContextClass, Modifier.PUBLIC);
     
        // 'extends Application'
        sClass.setSuperclass(Scene.v().getSootClass("android.app.Application"));
        
        String className = sClass.getName();
        System.out.println(className);
        Scene.v().addClass(sClass);
        
        SootField instance = new SootField("instance", RefType.v(appContextClass), Modifier.PRIVATE|Modifier.STATIC);
        sClass.addField(instance);
        
        //<init>
        {
        	SootMethod method = new SootMethod("<init>", new ArrayList(), VoidType.v(), Modifier.PUBLIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(appContextClass));
	        body.getLocals().add(ref0);
	        
	        units.add(Jimple.v().newIdentityStmt(ref0, Jimple.v().newThisRef(RefType.v(appContextClass))));
	        
	        SootMethod toCall = Scene.v().getMethod("<android.app.Application: void <init>()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(ref0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnVoidStmt());
        }
        
        //public static MyApp getInstance()
        {
	        SootMethod method = new SootMethod("getInstance", new ArrayList(), RefType.v(appContextClass), Modifier.PUBLIC|Modifier.STATIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        Local ref0;
	        
	        ref0 = Jimple.v().newLocal("r0", RefType.v(appContextClass));
	        body.getLocals().add(ref0);
	        
	        units.add(Jimple.v().newAssignStmt(ref0, Jimple.v().newStaticFieldRef(instance.makeRef())));
	        
	        units.add(Jimple.v().newReturnStmt(ref0));
        }  
        
        //public MyApp getContext()
        {
        	SootMethod method = new SootMethod("getContext", new ArrayList(), RefType.v("android.content.Context"), Modifier.PUBLIC|Modifier.STATIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        
	        Local r0;
	        Local r1;
	        
	        r0 = Jimple.v().newLocal("r0", RefType.v(appContextClass));
	        body.getLocals().add(r0);
	        
	        r1 = Jimple.v().newLocal("r1", RefType.v("android.content.Context"));
	        body.getLocals().add(r1);
	        
	        units.add(Jimple.v().newAssignStmt(r0, Jimple.v().newStaticFieldRef(instance.makeRef())));	        

	        SootMethod toCall = Scene.v().getMethod("<android.content.Context: android.content.Context getApplicationContext()>");
	        units.add(Jimple.v().newAssignStmt(r1, Jimple.v().newVirtualInvokeExpr(r0, toCall.makeRef())));
	        
	        units.add(Jimple.v().newReturnStmt(r1));
        }
        
        //public void onCreate()
        {
        	SootMethod method = new SootMethod("onCreate", new ArrayList(), VoidType.v(), Modifier.PUBLIC);	        
	        sClass.addMethod(method);
	
	        JimpleBody body = Jimple.v().newBody(method);
	        method.setActiveBody(body);
	        
	        Chain units = body.getUnits();
	        
	        Local r0;
	        	        
	        r0 = Jimple.v().newLocal("r0", RefType.v(appContextClass));
	        body.getLocals().add(r0);	        
	        
	        units.add(Jimple.v().newIdentityStmt(r0, Jimple.v().newThisRef(RefType.v(appContextClass))));
	        units.add(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(instance.makeRef()), r0));
	        
	        SootMethod toCall = Scene.v().getMethod("<android.app.Application: void onCreate()>");
	        units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(r0, toCall.makeRef())));
	        units.add(Jimple.v().newReturnVoidStmt());
        }
        
        try{
	        //String fileName = SourceLocator.v().getFileNameFor(sClass, Options.output_format_class);
	        
	        String fileName = className.replace('.', '/') + ".class";
	        
	        //System.out.println("directory+filename:" + getClassPath() + fileName);
	        System.out.println("directory:" + getClassPath());
	        System.out.println("filename:" + fileName);
	        
	        OutputStream streamOut = new JasminOutputStream(
	                                    new FileOutputStream(getClassPath() + fileName));
	        PrintWriter writerOut = new PrintWriter(
	                                    new OutputStreamWriter(streamOut));
	        JasminClass jasminClass = new soot.jimple.JasminClass(sClass);
	        jasminClass.print(writerOut);
	        writerOut.flush();
	        streamOut.close();
        }catch(Exception e){
        	System.out.println("Not doing anything");
        	System.out.println(e.getMessage());
        }
	}
	
	private void createBoolWrapper(){
		
		System.out.println("package names:" + pkgTransformer.getPackageNames());
		Vector<String> packages = new Vector<String>();
		
				
		if(!(pkgTransformer.getPackageNames().isEmpty())){
			for(String s : pkgTransformer.getPackageNames()){
				createBoolWrapperClass(s);
				createDialogListener(s);
				createOnMultiChoiceClickListener(s);
				createDialogExample(s);
				
				createServiceReplyClass(s);
				createBroadcastReceiver(s);
				createQueryExample(s);
				
				createApplicationContextClass(s);
				//createToastExample(s);
			}
		}		
	}
		
	private void countInitLOC(){
		
		locTransformer = new LocTransformer();
		Transform transform1 = new Transform("jtp.LocTransformer",
				locTransformer);
		PackManager.v().getPack("jtp").add(transform1);

				
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
				
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}
	
	private void countFinalLOC(){
		
		locTransformer = new LocTransformer();
		Transform transform1 = new Transform("jtp.LocTransformer",
				locTransformer);
		PackManager.v().getPack("jtp").add(transform1);

				
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(OUTPUT_DIR + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(OUTPUT_PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(OUTPUT_DIR)+OUTPUT_DIR.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}
	
	
	
	private void findPackages(){
		soot.options.Options.v().set_whole_program(true);
		//Scene.v().setSootClassPath(getClassPath() + ":" + getRtJars());
		Scene.v().setSootClassPath(getRtJars() + ":" + getClassPath());
		/*
		List<String> main_classes = m_OnCreateTransformer.getClasses();
		List<SootMethod> entry_points = new ArrayList<SootMethod>();
		
		
		for (String main_class : main_classes) {
			SootClass main_soot_class = Scene.v().loadClassAndSupport(
					main_class);
			SootMethod method = main_soot_class.getMethodByName(MyConstants.mainEntry);
			method.setDeclaringClass(main_soot_class);

			System.out.println("entry point:" + method);

			entry_points.add(method);
		}
		*/
		//LinkedHashMap<String, String> mClassToMethod = m_OnCreateTransformer.getClassToMethod();
		LinkedHashMap<String, String> mClassToMethod = findUncalledOverridingMethodsTransformer.getClassToMethod();		
		
		List<SootMethod> entry_points = new ArrayList<SootMethod>();
		
		Set<String> keySet = mClassToMethod.keySet();
		Iterator<String> keyIterator = keySet.iterator();
		while (keyIterator.hasNext()) {

			String mClass = keyIterator.next();
			String method = mClassToMethod.get(mClass);

			System.out.println("building entry points:" + mClass + "|" + method);
			
			mClass = mClass.substring(0, mClass.indexOf("|"));
			
			try{
				SootClass main_soot_class = Scene.v().loadClassAndSupport(mClass);
				SootMethod sMethod = main_soot_class.getMethod(method);
				sMethod.setDeclaringClass(main_soot_class);
				
				System.out.println("entry point:" + method);

				entry_points.add(sMethod);
				
			}catch(Exception e){
				System.out.println("EXCEPTION is raised loading " + mClass);
				e.printStackTrace();
			}			
		}
		
		Scene.v().setEntryPoints(entry_points);

		
		pkgTransformer = new PackageNameTransformer();
		
		Transform transform1 = new Transform("wjtp.PackageNameTransformer",
				pkgTransformer);
		// CallGraphTransformer transformer = new CallGraphTransformer();
		// Transform transform1 = new Transform("wjtp.CallGraphTransformer",
		// transformer);
		PackManager.v().getPack("wjtp").add(transform1);

		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("c");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(CLASSPATH);
		sootArgs.add("-w");
		
		sootArgs.add("-x");
		sootArgs.add("java.");
		sootArgs.add("-x");
		sootArgs.add("android.");
		sootArgs.add("-x");
		sootArgs.add("org.");
		sootArgs.add("-x");
		sootArgs.add("javax.");		
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
				
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}		

		soot.Main.main(soot_args);
	}
	
	private void findUncalledOverridingMethods(){
		
		findUncalledOverridingMethodsTransformer = new FindUncalledOverridingMethodsTransformer(appUncalledMethods);
		Transform transform = new Transform("jtp.FindUncalledOverridingMethodsTransformer", findUncalledOverridingMethodsTransformer);
		PackManager.v().getPack("jtp").add(transform);
		
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);

		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}
		
		soot.Main.main(soot_args);
	}
	
	private void findUncalledMethods(){
		
		findUncalledMethodsTransformer = new FindUncalledMethodsTransformer();
		Transform transform = new Transform("jtp.FindUncalledMethodsTransformer", findUncalledMethodsTransformer);
		PackManager.v().getPack("jtp").add(transform);
		
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);

		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}
		
		soot.Main.main(soot_args);
	}
	
	private void scanForSourcesAndSinks() {

		findSourcesTransformer = new FindSourcesTransformer();
		Transform transform1 = new Transform("jtp.FindSourcesTransformer",
				findSourcesTransformer);
		PackManager.v().getPack("jtp").add(transform1);

				
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}
	
	
	private void locateSources() {

		leakSourceTransformer = new LeakSourceTransformer();
		Transform transform1 = new Transform("jtp.LeakSourceTransformer",
				leakSourceTransformer);
		PackManager.v().getPack("jtp").add(transform1);

				
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}
	
	private void findContactsSources() {

		leakContactsTransformer = new LeakContactsTransformer();
		Transform transform1 = new Transform("jtp.LeakContactsTransformer",
				leakContactsTransformer);
		PackManager.v().getPack("jtp").add(transform1);

			
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}
	
	private void resolveReflection(){
		
		resolveReflectionTransformer = new ResolveReflectionTransformer();
		Transform transform1 = new Transform("jtp.ResolveReflectionTransformer",
				resolveReflectionTransformer);
		PackManager.v().getPack("jtp").add(transform1);

		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		/*
		sootArgs.add("-x");
		sootArgs.add("java.");
		sootArgs.add("-x");
		sootArgs.add("android.");
		sootArgs.add("-x");
		sootArgs.add("org.");
		sootArgs.add("-x");
		sootArgs.add("javax.");
		*/
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
				
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}
	
	private void killPhantoms(){
		
		
		killPhantomTransformer = new KillPhantomTransformer();
		Transform transform1 = new Transform("jtp.KillPhantomTransformer", killPhantomTransformer);
		PackManager.v().getPack("jtp").add(transform1);
		
		
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("c");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(CLASSPATH);
		
		
		/*
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		*/
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}
		
		soot.Main.main(soot_args);
	}

	private void findNaiveEntryPoints() {

		m_OnCreateTransformer = new OnCreateTransformer();
		Transform transform1 = new Transform("jtp.OnCreateTransform",
				m_OnCreateTransformer);
		PackManager.v().getPack("jtp").add(transform1);

				
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		sootArgs.add("J");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
	}

	private void doCallGraphAnalysis() {
		
		System.out.println("starting callgraph analysis...");
		
		//Scene.v().loadClassAndSupport("android.app.AlertDialog");
		//Scene.v().loadClassAndSupport("android.app.AlertDialog$Builder");
		
		soot.options.Options.v().set_whole_program(true);
		Scene.v().setSootClassPath(getClassPath() + ":" + getRtJars());
		//List<String> main_classes = m_OnCreateTransformer.getClasses();
		//LinkedHashMap<String, String> mClassToMethod = m_OnCreateTransformer.getClassToMethod();
		LinkedHashMap<String, String> mClassToMethod = findUncalledOverridingMethodsTransformer.getClassToMethod();
		
		List<SootMethod> entry_points = new ArrayList<SootMethod>();
		
		Set<String> keySet = mClassToMethod.keySet();
		Iterator<String> keyIterator = keySet.iterator();
		while (keyIterator.hasNext()) {

			String mClass = keyIterator.next();
			String method = mClassToMethod.get(mClass);

			System.out.println("building entry points:" + mClass + "|" + method);
			
			mClass = mClass.substring(0, mClass.indexOf("|"));
			
			SootClass main_soot_class = Scene.v().loadClassAndSupport(mClass);
			SootMethod sMethod = main_soot_class.getMethod(method);
			sMethod.setDeclaringClass(main_soot_class);

			System.out.println("entry point:" + method);

			entry_points.add(sMethod);
		}
		
		/*
		List<SootMethod> entry_points = new ArrayList<SootMethod>();
		for (String main_class : main_classes) {
			SootClass main_soot_class = Scene.v().loadClassAndSupport(
					main_class);
			SootMethod method = main_soot_class.getMethodByName(MyConstants.mainEntry);
			method.setDeclaringClass(main_soot_class);

			System.out.println("entry point:" + method);

			entry_points.add(method);
		}
		*/
		System.out.println("setting entry points: " + entry_points);
		Scene.v().setEntryPoints(entry_points);

		cgTransformer = new CallGraphTransformer();
		Transform transform1 = new Transform("wjtp.CallGraphTransformer",
				cgTransformer);
		// CallGraphTransformer transformer = new CallGraphTransformer();
		// Transform transform1 = new Transform("wjtp.CallGraphTransformer",
		// transformer);
		PackManager.v().getPack("wjtp").add(transform1);		
		
		List<String> sootArgs = new ArrayList<String>();
		
		sootArgs.add("-output-format");
		//sootArgs.add("J");
		sootArgs.add("c");
		sootArgs.add("-soot-class-path");
		sootArgs.add(getClassPath() + ":" + getRtJars());
		sootArgs.add("-output-dir");
		sootArgs.add(OUTPUT);
		sootArgs.add("-w");
		
		sootArgs.add("-x");
		sootArgs.add("java.");
		sootArgs.add("-x");
		sootArgs.add("android.");
		sootArgs.add("-x");
		sootArgs.add("org.");	
		
		
		if(CallGraphTransformer.INSTRUMENT == true && CallGraphTransformer.O4 == true){
			sootArgs.add("-O");
		}		
		
		if(MyConstants.ALLOW_PHANTOM_REFS){
			sootArgs.add("-allow-phantom-refs");
		}
		
		List<File> fileList = new ArrayList<File>();
		findFiles(PROCESS_DIR, fileList);
		
		for(File file : fileList){
			String absoluteName = file.getAbsolutePath();
			String relativeName = absoluteName.substring(
					absoluteName.indexOf(CLASSPATH)+CLASSPATH.length(), absoluteName.length());
			String className = relativeName.substring(0, relativeName.indexOf(".class"));
			className = className.replace("/", ".");
			while(className.startsWith(".")){
				className = className.substring(1);
			}
			//System.out.println("clname:" + className);
			sootArgs.add(className);
		}
		
		String[] soot_args = new String[sootArgs.size()];
		for(int i=0;i<sootArgs.size();i++){
			soot_args[i] = sootArgs.get(i);
		}

		soot.Main.main(soot_args);
		CallGraphTransformer.O4Time = System.currentTimeMillis() - CallGraphTransformer.O4Time;
		System.out.println("O4 TIME: " + CallGraphTransformer.O4Time);
	}
	
	public static void main(String[] args) {
		
		String usage = "usage: ./transblocker <class-dir [-p proc-dir]> [major-option [minor-option]]";
		
		File directory = new File(".");
		String pwd = "";
		try{
			pwd = directory.getAbsolutePath();
		}catch(Exception e){
			System.out.println(e.getMessage());
			System.err.println(usage);
			System.exit(-1);
		}
		
		LIB_DIR = pwd + "/../sdk/platforms/default/";	
		
		
		MXPARSER = LIB_DIR + MyConstants.MXPARSER;
		COMMON_LOGGING = LIB_DIR + MyConstants.ORG_APACHE_COMMONS_LOGGING;
		COMMON_CODEC = LIB_DIR + MyConstants.ORG_APACHE_COMMONS_CODEC;
		
		ANDROID_17 = LIB_DIR + MyConstants.ANDROID_17;
		ANDROID_16 = LIB_DIR + MyConstants.ANDROID_16;
		ANDROID_15 = LIB_DIR + MyConstants.ANDROID_15;
		ANDROID_10 = LIB_DIR + MyConstants.ANDROID_10;
		ANDROID_8 = LIB_DIR + MyConstants.ANDROID_8;
		ANDROID_7 = LIB_DIR + MyConstants.ANDROID_7;
		ANDROID_4 = LIB_DIR + MyConstants.ANDROID_4;
		ANDROID_3 = LIB_DIR + MyConstants.ANDROID_3;
		
		GOOGLE_MAPS_17 = LIB_DIR + MyConstants.GOOGLE_MAPS_17;
		GOOGLE_MAPS_16 = LIB_DIR + MyConstants.GOOGLE_MAPS_16;
		GOOGLE_MAPS_15 = LIB_DIR + MyConstants.GOOGLE_MAPS_15;
		GOOGLE_MAPS_10 = LIB_DIR + MyConstants.GOOGLE_MAPS_10;
		GOOGLE_MAPS_8 = LIB_DIR + MyConstants.GOOGLE_MAPS_8;
		GOOGLE_MAPS_7 = LIB_DIR + MyConstants.GOOGLE_MAPS_7;
		GOOGLE_MAPS_4 = LIB_DIR + MyConstants.GOOGLE_MAPS_4;
		GOOGLE_MAPS_3 = LIB_DIR + MyConstants.GOOGLE_MAPS_3;
		
		
		GOOGLE_ANALYTICS = LIB_DIR + MyConstants.GOOGLE_ANALYTICS;
		GOOGLE_ANALYTICS_V2 = LIB_DIR + MyConstants.GOOGLE_ANALYTICS_V2;
		GOOGLE_ADMOB_ADS = LIB_DIR + MyConstants.GOOGLE_ADMOB_ADS;
		
		//System.out.println(ANDROID);
		
		int len = 0;
		if(args.length>len){
			String filename = args[len];
			CLASSPATH = filename + "/";
			OUTPUT = "output" + "_" + filename.substring(args[len].lastIndexOf('/')+1);
			OUTPUT_DIR = pwd.substring(0, pwd.lastIndexOf("/.")) + "/" + OUTPUT + "/";
			
			PROCESS_DIR = CLASSPATH;
			OUTPUT_PROCESS_DIR = OUTPUT_DIR;
			
			LOG = pwd + "/../output/" + filename + ".log";
			CONF = pwd + "/../config/android-sdk-version.conf";
			
			Log.init(LOG);
			Config.configure(CONF);
			
			
			len++;
			if(args.length>len){
				PROCESS_DIR = CLASSPATH + args[len] + "/";
				OUTPUT_PROCESS_DIR = OUTPUT_DIR + args[len] + "/";
				len++;
			}		
			
			System.out.println("processing package " + filename + " under " + PROCESS_DIR + ", output directory:" + OUTPUT_DIR);
		}else{
			System.err.println(usage);
			System.exit(-1);
		}
		
		len++;
		
		if(args.length>len){
			if(args[len].equals("-p")){
				len++;
				if(args.length>len){
					
					if(args[len].startsWith("-")){
						System.err.println(usage);
						System.exit(-1);
					}
					
					if(args[len].endsWith("/")){
						PROCESS_DIR = CLASSPATH + args[len];
					}else{
						PROCESS_DIR = CLASSPATH + args[len] + "/";
					}
					len++;
				}else{
					System.err.println(usage);
					System.exit(-1);
				}
			}
		}
		
		System.out.println("PROCESS_DIR:" + PROCESS_DIR);
		
		if(args.length>len){
			if(args[len].equals("-analyze")){
				
				len++;
				CallGraphTransformer.ANALYZE = true;
				CallGraphTransformer.INSTRUMENT = false;
				CallGraphTransformer.OPTIMIZE = false;
				
				if(args.length>len){
				
					if(args[len].equals("-cf")){				
						CallGraphTransformer.CFG = true;
						CallGraphTransformer.REACH_DEF = false;
						CallGraphTransformer.DATAFLOW = false;
						
					}else if(args[len].equals("-rd")){
						CallGraphTransformer.CFG = false;
						CallGraphTransformer.REACH_DEF = true;
						CallGraphTransformer.DATAFLOW = false;
						
					}else if(args[len].equals("-df")){
						CallGraphTransformer.CFG = false;
						CallGraphTransformer.REACH_DEF = false;
						CallGraphTransformer.DATAFLOW = true;
						
					}else{
						CallGraphTransformer.CFG = true;				
						CallGraphTransformer.REACH_DEF = true;
						CallGraphTransformer.DATAFLOW = true;
					}
					
				}else{
					CallGraphTransformer.CFG = true;				
					CallGraphTransformer.REACH_DEF = true;
					CallGraphTransformer.DATAFLOW = true;
				}
				
			}else if(args[len].equals("-instrument")){
				CallGraphTransformer.ANALYZE = true;
				CallGraphTransformer.INSTRUMENT = true;
				CallGraphTransformer.OPTIMIZE = false;			
				
			}else if(args[len].equals("-optimize")){
				
				len++;
				CallGraphTransformer.ANALYZE = true;
				CallGraphTransformer.INSTRUMENT = true;
				CallGraphTransformer.OPTIMIZE = true;			
				
				if(args.length>len){
					if(args[len].equals("-o1")){				
						CallGraphTransformer.O1 = true;
						CallGraphTransformer.O2 = false;
						CallGraphTransformer.O3 = false;
						CallGraphTransformer.O4 = false;
						
					}else if(args[len].equals("-o2")){
						CallGraphTransformer.O1 = true;
						CallGraphTransformer.O2 = true;
						CallGraphTransformer.O3 = false;
						CallGraphTransformer.O4 = false;
						
					}else if(args[len].equals("-o3")){
						CallGraphTransformer.O1 = true;
						CallGraphTransformer.O2 = true;
						CallGraphTransformer.O3 = true;
						CallGraphTransformer.O4 = false;
						
					}else if(args[len].equals("-o4")){
						CallGraphTransformer.O1 = true;
						CallGraphTransformer.O2 = true;
						CallGraphTransformer.O3 = true;
						CallGraphTransformer.O4 = true;
						
					}else{
						CallGraphTransformer.O1 = true;
						CallGraphTransformer.O2 = true;
						CallGraphTransformer.O3 = true;
						CallGraphTransformer.O4 = true;
					}
				}else{
					CallGraphTransformer.O1 = true;
					CallGraphTransformer.O2 = true;
					CallGraphTransformer.O3 = true;
					CallGraphTransformer.O4 = true;
				}
				
			}else{
				CallGraphTransformer.ANALYZE = true;
				{
					CallGraphTransformer.CFG = true;				
					CallGraphTransformer.REACH_DEF = true;
					CallGraphTransformer.DATAFLOW = true;
				}
				
				CallGraphTransformer.INSTRUMENT = true;
				
				CallGraphTransformer.OPTIMIZE = true;
				{
					CallGraphTransformer.O1 = true;
					CallGraphTransformer.O2 = true;
					CallGraphTransformer.O3 = true;
					CallGraphTransformer.O4 = true;
				}
			}
		}
		
		else{
			CallGraphTransformer.ANALYZE = true;
			{
				CallGraphTransformer.CFG = true;				
				CallGraphTransformer.REACH_DEF = true;
				CallGraphTransformer.DATAFLOW = true;
			}
			
			CallGraphTransformer.INSTRUMENT = true;
			
			CallGraphTransformer.OPTIMIZE = true;
			{
				CallGraphTransformer.O1 = true;
				CallGraphTransformer.O2 = true;
				CallGraphTransformer.O3 = true;
				CallGraphTransformer.O4 = true;
			}
		}
			
			
		CallGraphExample call_graph2 = new CallGraphExample();

		call_graph2.run();
	}

	public static CallGraph callgraph;

	public static Vector<String> classNames = new Vector<String>();

	
	private void findFiles(String sDir, List<File> fileList){
		File[] faFiles = new File(sDir).listFiles();
		for(File file: faFiles){
			//if(file.getName().matches("^(.*?)")){
			if(file.getName().contains(".class")){
				//System.out.println(file.getAbsolutePath());
				fileList.add(file);
			}
			if(file.isDirectory()){
				findFiles(file.getAbsolutePath(), fileList);
			}
		}
	}
}
